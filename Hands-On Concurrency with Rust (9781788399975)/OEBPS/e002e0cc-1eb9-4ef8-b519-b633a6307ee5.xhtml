<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Further reading</h1>
                </header>
            
            <article>
                
<p>Building concurrent data structure is a broad field of wide concern. These notes cover much the same space as the notes from <a href="5a332d94-37e4-4748-8920-1679b07e2880.xhtml" target="_blank">Chapter 4</a><span>, </span><em>Sync and Send – the Foundation of Rust Concurrency</em>. Please do refer back to those notes.</p>
<ul>
<li><em>The Little Book of Semaphores</em>, Allen Downey, available at <a href="http://greenteapress.com/wp/semaphores/">http://greenteapress.com/wp/semaphores/</a>.This is a charming book of concurrency puzzles, suitable for undergraduates but challenging enough in Rust for the absence of semaphores. We'll revisit this book in the next chapter when we build concurrency primitives out of atomics.</li>
<li><em>The Computability of Relaxed Data Structures: Queues and Stacks as Examples</em>, Nir Shavit and Gadi Taubenfeld. This chapter discussed the implementation of a concurrent queue based on the presentation of <em>The Art of Multiprocessor Programming</em> and the author's knowledge of Erlang's process queue. Queues are a common concurrent data structure and there are a great many possible approaches. This paper discusses an interesting notion. Namely, if we relax the ordering constraint of the queue, can we squeeze out more performance from a modern machine?</li>
<li><em>Is Parallel Programming Hard, and, If So, What Can You Do About It?</em>, Paul McKenney. This book covers roughly the same material as <a href="5a332d94-37e4-4748-8920-1679b07e2880.xhtml" target="_blank">Chapter 4</a><span>, </span><em>Sync and Send – the Foundation of Rust Concurrency,</em> and <a href="e2de1ba7-c291-494e-82da-37fee7323c1d.xhtml" target="_blank">Chapter 5</a>, <em>Locks – Mutex, Condvar, Barriers, and RWLock</em>, but in significantly more detail. I highly encourage readers to look into getting a copy and reading it, especially the eleventh chapter on validating implementations.</li>
</ul>


            </article>

            
        </section>
    </div></body>
</html>