<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Atomics – Safely Reclaiming Memory</h1>
                </header>
            
            <article>
                
<p>In the previous chapter, we discussed the atomic primitives available to the Rust programmer, implementing higher-level synchronization primitives and some data structures built entirely of atomics. A key challenge with atomic-only programming, compared to using higher-level synchronization primitives, is memory reclamation. It is only safe to free memory once. When we build concurrent algorithms only from atomic primitives, it's very challenging to do something only once and keep performance up. That is, safely reclaiming memory requires some form of synchronization. But, as the total number of concurrent actors rise, the cost of synchronization dwarfs the latency or throughput benefits of atomic programming.</p>
<p>In this chapter, we will discuss three techniques to resolve the memory reclamation issue of atomic programming—r<span>eference counting, h</span><span>azard pointers, and e</span><span>poch-based reclamation. </span><span>These methods will be familiar to you from previous chapters, but here we will do a deep-dive on them, investigating their trade-offs. We will introduce two new libraries, <kbd>conc</kbd> and crossbeam, which implement hazard pointers and epoch-based reclamation, respectively. By the close of this chapter, you should have a good handle on the three approaches presented and be in a good place to start laying down production-quality code.</span></p>
<p>By the end of this chapter, we will have:</p>
<ul>
<li>Discussed reference counting and its associated tradeoffs</li>
<li>Discussed the hazard pointer approach to memory reclamation</li>
<li>Investigated a Treiber stack using the hazard pointer approach via the <kbd>conc</kbd> crate</li>
<li>Discussed the epoch-based reclamation strategy</li>
<li>Done a deep investigation of the <kbd>crossbeam_epoch</kbd> crate</li>
<li>Investigated a Treiber stack using the epoch-based reclamation approach</li>
</ul>


            </article>

            
        </section>
    </div></body>
</html>