<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Fuzzing the simulation</h1>
                </header>
            
            <article>
                
<p>Feruscore has been changed in this chapter to include raw memory access in both Rust and through FFI. The responsible thing to do is fuzz <kbd>Mars</kbd> and make sure we're not causing segmentation faults. We'll use AFL, which we discussed back in <a href="8c61da2f-08c8-40be-89d4-d8afa8510850.xhtml" target="_blank">Chapter 2</a>, <em>Sequential Rust Performance and Testing</em>, and again in <a href="e2de1ba7-c291-494e-82da-37fee7323c1d.xhtml" target="_blank">Chapter 5</a>, <em>Locks – Mutex, Condvar, Barriers, and RWLock</em>. The fuzz target is <kbd>src/bin/fuzz_target.rs</kbd>. The trick with fuzzing is ensuring stability. That is, AFL can't really do its work if for some input applied multiple times multiple paths come out. Fuzzing is more efficient in the case of a deterministic system. We were careful to make <kbd>Mars::compete_inner</kbd> deterministic, where <kbd>Mars::compete</kbd> uses randomness to determine warrior positions. Fuzzing, then, will go through <kbd>compete_inner</kbd> only. The preamble for <kbd>fuzz_target</kbd> doesn't contain any new crates:</p>
<pre>extern crate byteorder;
extern crate feruscore;

use byteorder::{BigEndian, ReadBytesExt};
use feruscore::individual::*;
use feruscore::instruction::*;
use feruscore::mars::*;
use std::io::{self, Cursor, Read};</pre>
<p>Remember that AFL passes a byte slice through stdin and the fuzzing target is responsible for deserializing that array into something sensible for itself. We'll build up a <kbd>Config</kbd> structure:</p>
<pre>#[derive(Debug)]
struct Config {
    pub rounds: u16,
    pub core_size: u16,
    pub cycles: u16,
    pub processes: u16,
    pub max_warrior_length: u16,
    pub left_chromosome_size: u16,
    pub right_chromosome_size: u16,
    pub left: Individual,
    pub right: Individual,
    pub left_pos: u16,
    pub right_pos: u16,
}</pre>
<p>Hopefully, these fields are familiar. The <kbd>rounds</kbd>, <kbd>core_size</kbd>, <kbd>cycles</kbd>, and <kbd>processes</kbd> each affect the MARS environment. The <kbd>max_warrior_length</kbd>, <kbd>left_chromosome_size</kbd>, and <kbd>right_chromosome_size</kbd> affect the two individuals that will be made to compete. <kbd>left</kbd> and <kbd>right</kbd> are those <kbd>Individual</kbd> instances. <kbd>left_pos</kbd> and <kbd>right_pos</kbd> set where the warriors will be placed in the MARS core memory. The numbers that we'll deserialize from the byte slice won't always be entirely sensible, so there'll be some cleanup needed, like so:</p>
<pre>impl Config {
    pub fn new(rdr: &amp;mut Cursor&lt;Vec&lt;u8&gt;&gt;) -&gt; io::Result&lt;Config&gt; {
        let rounds = (rdr.read_u16::&lt;BigEndian&gt;()? % 1000).max(1);
        let core_size = (rdr.read_u16::&lt;BigEndian&gt;()? % 24_000).max(256);
        let cycles = (rdr.read_u16::&lt;BigEndian&gt;()? % 10_000).max(100);
        let processes = (rdr.read_u16::&lt;BigEndian&gt;()? % 1024).max(2);
        let max_warrior_length = (rdr.read_u16::&lt;BigEndian&gt;()? % 256).max(4);
        let left_chromosome_size = (rdr.read_u16::&lt;BigEndian&gt;()? <br/>                                       % max_warrior_length).max(2);
        let right_chromosome_size = (rdr.read_u16::&lt;BigEndian&gt;()? <br/>                                        % max_warrior_length).max(2);</pre>
<p>It doesn't make any sense for there to be 0 rounds, as an example, so we say thatthere must be at least one round. Likewise, we need two processes, desire at least four warrior instructions, and so forth. Creating the left and right warriors is a matter of passing the byte reader into <kbd>Config::mk_individual</kbd>:</p>
<pre>        let left = Config::mk_individual(rdr, <br/>                                         max_warrior_length,<br/>                                         left_chromosome_size, <br/>                                         core_size)?;
        let right =
            Config::mk_individual(rdr, <br/>                                  max_warrior_length, <br/>                                  right_chromosome_size, <br/>                                  core_size)?;</pre>
<p><kbd>Config::mk_individual</kbd> deserializes into <kbd>InstructionBuilder</kbd>. The whole thing is kind of awkward. While we can convert a field-less Enum into an integer, it's not possible to go from an integer to a field-less Enum without some hairy match statements:</p>
<pre>    fn mk_individual(
        rdr: &amp;mut Cursor&lt;Vec&lt;u8&gt;&gt;,
        max_chromosome_size: u16,
        chromosome_size: u16,
        core_size: u16,
    ) -&gt; io::Result&lt;Individual&gt; {
        assert!(chromosome_size &lt;= max_chromosome_size);
        let mut indv = IndividualBuilder::new();
        for _ in 0..(chromosome_size as usize) {
            let builder = InstructionBuilder::new(core_size);
            let a_field = rdr.read_i8()?;
            let b_field = rdr.read_i8()?;
            let a_mode = match rdr.read_u8()? % 5 {
                0 =&gt; Mode::Direct,
                1 =&gt; Mode::Immediate,
                2 =&gt; Mode::Indirect,
                3 =&gt; Mode::Decrement,
                _ =&gt; Mode::Increment,
            };
            let b_mode = match rdr.read_u8()? % 5 {
                0 =&gt; Mode::Direct,
                1 =&gt; Mode::Immediate,
                2 =&gt; Mode::Indirect,
                3 =&gt; Mode::Decrement,
                _ =&gt; Mode::Increment,
            };</pre>
<p>Here, we've established the <kbd>InstructionBuilder</kbd> and read the <kbd>Mode</kbd> for a-field and b-field out from the byte slice. If a field is added, we'll have to come through here and update the fuzzing code. It's a real pain. Reading the <kbd>Modifier</kbd> out works the same way:</p>
<pre>            let modifier = match rdr.read_u8()? % 7 {
                0 =&gt; Modifier::F,
                1 =&gt; Modifier::A,
                2 =&gt; Modifier::B,
                3 =&gt; Modifier::AB,
                4 =&gt; Modifier::BA,
                5 =&gt; Modifier::X,
                _ =&gt; Modifier::I,
            };</pre>
<p>As does reading out the <kbd>OpCode</kbd>:</p>
<pre>            let opcode = match rdr.read_u8()? % 16 {
                0 =&gt; OpCode::Dat,   // 0
                1 =&gt; OpCode::Spl,   // 1
                2 =&gt; OpCode::Mov,   // 2
                3 =&gt; OpCode::Djn,   // 3
                4 =&gt; OpCode::Add,   // 4
                5 =&gt; OpCode::Jmz,   // 5
                6 =&gt; OpCode::Sub,   // 6
                7 =&gt; OpCode::Seq,   // 7
                8 =&gt; OpCode::Sne,   // 8
                9 =&gt; OpCode::Slt,   // 9
                10 =&gt; OpCode::Jmn,  // 10
                11 =&gt; OpCode::Jmp,  // 11
                12 =&gt; OpCode::Nop,  // 12
                13 =&gt; OpCode::Mul,  // 13
                14 =&gt; OpCode::Modm, // 14
                _ =&gt; OpCode::Div,   // 15
            };</pre>
<p>Producing an instruction is simple enough, thanks to the builder pattern in use here:</p>
<pre>            let inst = builder
                .a_field(a_field)
                .b_field(b_field)
                .a_mode(a_mode)
                .b_mode(b_mode)
                .modifier(modifier)
                .opcode(opcode)
                .freeze();
            indv = indv.push(inst);
        }
        Ok(indv.freeze())
    }</pre>
<p>Moving back up to <kbd>Config::new</kbd>, we create the left and right positions:</p>
<pre>        let left_pos =
            Config::adjust_pos(core_size, <br/>                               rdr.read_u16::&lt;BigEndian&gt;()?, <br/>                               max_warrior_length);
        let right_pos =
            Config::adjust_pos(core_size, <br/>                               rdr.read_u16::&lt;BigEndian&gt;()?, <br/>                               max_warrior_length);</pre>
<p>The <kbd>adjust_pos</kbd> function is a small thing, intended to keep warrior positions properly in bounds:</p>
<pre>    fn adjust_pos(core_size: u16, mut pos: u16, space: u16) -&gt; u16 {
        pos %= core_size;
        if (pos + space) &gt; core_size {
            let past = (pos + space) - core_size;
            pos - past
        } else {
            pos
        }
    }</pre>
<p>It's entirely possible that the warriors will overlap with this calculation. That is okay. Our ambition with fuzzing is not to check the logic of the program, only to seek out crashes. In fact, if overlapping two warriors causes a crash, that's a fact we need to know. The close of <kbd>Config::new</kbd> is fairly straightforward:</p>
<pre>        Ok(Config {
            rounds,
            core_size,
            cycles,
            processes,
            max_warrior_length,
            left_chromosome_size,
            right_chromosome_size,
            left,
            right,
            left_pos,
            right_pos,
        })
    }</pre>
<p>After all that, the main function of <kbd>fuzz_target</kbd> is minimal:</p>
<pre>fn main() {
    let mut input: Vec&lt;u8&gt; = Vec::with_capacity(1024);
    let result = io::stdin().read_to_end(&amp;mut input);
    if result.is_err() {
        return;
    }
    let mut rdr = Cursor::new(input);
    if let Ok(config) = Config::new(&amp;mut rdr) {
        let mut mars = MarsBuilder::default()
            .core_size(config.core_size)
            .cycles(config.cycles)
            .processes(u32::from(config.processes))
            .max_warrior_length(config.max_warrior_length as u16)
            .freeze();
        mars.compete_inner(
            &amp;config.left,
            config.left_pos,
            &amp;config.right,
            config.right_pos,
        );
    }
}</pre>
<p><kbd>Stdin</kbd> is captured and a <kbd>Cursor</kbd> built from it, which we pass into <kbd>Config::new</kbd>, as explained earlier. The resulting <kbd>Config</kbd> is used to fuel <kbd>MarsBuilder</kbd>, and the <kbd>Mars</kbd> is then the arena for competition between the two fuzzing <kbd>Individual</kbd> instances that may or may not overlap. Remember, before running AFL, be sure to run <kbd>cargo afl build</kbd>—release and not cargo build —release. Both will work, but the first is significantly faster to discover crashes, as AFL's instrumentation will be inlined in the executable. I've found that even a single instance of <kbd>cargo afl fuzz -i /tmp/in -o /tmp/out target/release/fuzz_target</kbd> will run through AFL cycles at a good clip. There aren't many branches in the code and, so, few paths for AFL to probe.</p>


            </article>

            
        </section>
    </div></body>
</html>