<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Sync and Send – the Foundation of Rust Concurrency</h1>
                </header>
            
            <article>
                
<p class="mce-root">Rust aims to be a programming language in which fearless concurrency is possible. What does this mean? How does it work? In <a href="8c61da2f-08c8-40be-89d4-d8afa8510850.xhtml" target="_blank">Chapter 2</a>, <em>Sequential Rust Performance Testing</em>, we discussed the performance of sequential Rust programs, intentionally setting aside discussion of concurrent programs. In <a href="605ce307-29ed-4b5a-961e-8d327467b84f.xhtml" target="_blank">Chapter 3</a>, <em>The Rust Memory Model – Ownership, References and Manipulation</em>, we saw an overview of the way Rust handles memory, especially with regard to composing high-performance structures. In this chapter, we'll expand on what we've learned previously and, at long last, dig in to Rust's concurrency story.</p>
<p>By the end of this chapter, we will have:</p>
<ul>
<li>Discussed the <kbd>Sync</kbd> and <kbd>Send</kbd> traits</li>
<li>Inspected parallel races in a ring data structure with Helgrind</li>
<li>Resolved this race with a mutex</li>
<li>Investigated the use of the standard library MPSC</li>
<li>Built a non-trivial data multiplexing project</li>
</ul>


            </article>

            
        </section>
    </div></body>
</html>