<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Testing with QuickCheck</h1>
                </header>
            
            <article>
                
<p>With that in mind, in this book, we'll make extensive use of <em>property-based</em> testing, also called <em>generative</em> testing by some literature. Property-based testing has a slightly different, if similar, workflow to unit testing. When writing property tests, the programmer will:</p>
<ul>
<li>Produce a method for generating valid inputs to a system under test</li>
<li>Write further code to demonstrate that for all valid inputs that a desirable property or property of the system holds</li>
</ul>
<p>Property-based testing is exceptionally good at finding corner cases in software, wacky inputs that the programmer might not have dreamed up, or, as happens from time to time, even understand as potentially problematic. We'll use Andrew Gallant's QuickCheck, a tool that is patterned from Haskell QuickCheck, introduced by Koen Claessen and John Hughes in their 2000 <em>QuickCheck: A Lightweight Tool for Random Testing of Haskell Programs</em>. First, a little preamble to get us into the testing module:</p>
<pre>#[cfg(test)]
mod test {
    extern crate quickcheck;

    use super::*;
    use quickcheck::{Arbitrary, Gen, QuickCheck, TestResult};</pre>
<p>If we were to unit test our naive <kbd>HashMap</kbd>, we'd probably write a test where a particular arbitrary key/value pair would be inserted and then we'd assert the ability to retrieve the same value with that same key. How does this map to property-based testing? The property is that if we perform an insertion on an empty <kbd>HashMap</kbd> with a key <kbd>k</kbd> of value <kbd>v</kbd> and immediately perform a retrieval of <kbd>k</kbd>, we'll receive <kbd>v</kbd> back out. Here it is:</p>
<pre>    #[test]
    fn get_what_you_give() {
        fn property(k: u16, v: u16) -&gt; TestResult {
            let mut system_under_test = HashMap::new();

            assert_eq!(None, system_under_test.insert(k, v));
            assert_eq!(Some(&amp;v), system_under_test.get(&amp;k));

            TestResult::passed()
        }
        QuickCheck::new().quickcheck(property as fn(u16, u16) -&gt; <br/>                                     TestResult);
    }</pre>
<p>The test is named <kbd>get_what_you_give</kbd> and is annotated <kbd>#[test]</kbd> as per usual Rust tests. What's different is this test has a property <kbd>inner</kbd> function that encodes the property we elaborated on earlier and a call out to QuickCheck for actually running the property test, by default 100 times, with different inputs. Exactly how QuickCheck manages this is pretty swell. Per the Claessen and Hughes paper, QuickCheck implements the <kbd>Arbitrary</kbd> trait for many of the types available in the standard library. QuickCheck defines <kbd>Arbitrary</kbd> like so, in <kbd>quickcheck/src/arbitrary.rs</kbd> :</p>
<pre style="padding-left: 30px">pub trait Arbitrary : Clone + Send + 'static {
    fn arbitrary&lt;G: Gen&gt;(g: &amp;mut G) -&gt; Self;

    fn shrink(&amp;self) -&gt; Box&lt;Iterator&lt;Item=Self&gt;&gt; {
        empty_shrinker()
    }
}</pre>
<p>The <kbd>Gen</kbd> parameter is a wrapper around <kbd>rand:Rng</kbd> with some extra machinery for controlling distributions. The two functions are <kbd>arbitrary</kbd> and <kbd>shrink</kbd>. The purpose of <kbd>arbitrary</kbd> is easy to explain: it generates new, random instances of a type that is <kbd>Arbitrary</kbd>. The <kbd>shrink</kbd> function is a little more complicated to get across. Let's say we've produced a function that takes a vector of <kbd>u16</kbd> but just so happens to have a bug and will crash if a member of the vector is <kbd>0</kbd>. A QuickCheck test will likely find this but the first arbitrary vector it generates may have a thousand members and a bunch of <kbd>0</kbd> entries. This is not a very useful failure case to begin diagnosis with. After a failing case is found by QuickCheck the case is shrunk, per the definition of <kbd>Arbitrary::shrink</kbd>. Our hypothetical vector will be cut in half and if that new case is also a failure then it'll be shrunk by half again and so on until it no longer fails, at which point—hopefully—our failing case is a much more viable diagnosis tool.</p>
<p>The implementation of <kbd>Arbitrary</kbd> for <kbd>u16</kbd> is a touch complicated due to macro use, but if you squint some, it'll become clear:</p>
<pre style="padding-left: 30px">macro_rules! unsigned_arbitrary {
    ($($ty:tt),*) =&gt; {
        $(
            impl Arbitrary for $ty {
                fn arbitrary&lt;G: Gen&gt;(g: &amp;mut G) -&gt; $ty {
                    #![allow(trivial_numeric_casts)]
                    let s = g.size() as $ty;
                    use std::cmp::{min, max};
                    g.gen_range(0, max(1, min(s, $ty::max_value())))
                }
                fn shrink(&amp;self) -&gt; Box&lt;Iterator&lt;Item=$ty&gt;&gt; {
                    unsigned_shrinker!($ty);
                    shrinker::UnsignedShrinker::new(*self)
                }
            }
        )*
    }
}

unsigned_arbitrary! {
    usize, u8, u16, u32, u64
}</pre>
<p>Arbitrary instances are generated by <kbd>unsigned_arbitrary!</kbd>, each of which in turn generates a shrinker via <kbd>unsigned_shrinker!</kbd>. This macro is too long to reprint here but the basic idea is to remove half of the unsigned integer on every shrink again, until zero is hit, at which point give up shrinking.</p>
<p>Fifteen years after the original QuickCheck paper, John Hughes summarized his experience in the intervening 15 years with his 2016 <em>Experiences with QuickCheck: Testing the Hard Stuff and Staying Sane</em>. Hughes noted that many property-based tests in the wild don't generate primitive types. The domain of applications in which primitive types are sufficient tends to be those rare, blessed pure functions in a code base. Instead, as many functions in a program are inherently stateful, property-based tests tend to generate arbitrary <em>actions</em> against a stateful system, <em>modeling</em> the expected behavior and validating that the system under test behaves according to its model.</p>
<p>How does that apply to our naive <kbd>HashMap</kbd>? The system under test is the naive HashMap, that's clear enough. Our actions are:</p>
<ul>
<li><kbd>INSERT</kbd> key value</li>
<li><kbd>LOOKUP</kbd> key</li>
</ul>
<p>Hopefully, that's straightforward. What about a model? In this particular instance, we're in luck. Our model is written for us: the standard library's <kbd>HashMap</kbd>. We need only confirm that if the same actions are applied to both our naive <kbd>HashMap</kbd> and the standard <kbd>HashMap</kbd> in the same order then we'll get the same returns from both the model and system under test. How does that look? First, we need actions:</p>
<pre>    #[derive(Clone, Debug)]
    enum Action&lt;T&gt;
    where
        T: Arbitrary,
    {
        Insert(T, u16),
        Lookup(T),
    }</pre>
<p>Our <kbd>Action&lt;T&gt;</kbd> is parameterized on a <kbd>T: Arbitrary</kbd> and all values via the Insert are pegged as <kbd>u16</kbd>s. This is done primarily for convenience's sake. Both key and value could be arbitrary or concrete types, depending on the preference of the tester. Our <kbd>Arbitrary</kbd> definition is as follows:</p>
<pre>    impl&lt;T&gt; Arbitrary for Action&lt;T&gt;
    where
        T: Arbitrary,
    {
        fn arbitrary&lt;G&gt;(g: &amp;mut G) -&gt; Action&lt;T&gt;
        where
            G: Gen,
        {
            let i: usize = g.gen_range(0, 100);
            match i {
                0...50 =&gt; Action::Insert(Arbitrary::arbitrary(g), <br/>                                         u16::arbitrary(g)),
                _ =&gt; Action::Lookup(Arbitrary::arbitrary(g)),
            }
        }
    }</pre>
<p>Either action is equally likely to happen and any instance of <kbd>T</kbd> or <kbd>u16</kbd> is valid for use. The validation of our naive <kbd>HashMap</kbd> against the standard library's <kbd>HashMap</kbd>:</p>
<pre>    #[test]
    fn sut_vs_genuine_article() {
        fn property&lt;T&gt;(actions: Vec&lt;Action&lt;T&gt;&gt;) -&gt; TestResult
        where
            T: Arbitrary + Eq + Hash + ::std::fmt::Debug,
        {
            let mut model = ::std::collections::HashMap::new();
            let mut system_under_test = HashMap::new();

            for action in actions.into_iter() {
                match action {
                    Action::Insert(k, v) =&gt; {
                        assert_eq!(model.insert(k.clone(), v), <br/>                        system_under_test.insert(k, v));
                    }
                    Action::Lookup(k) =&gt; {
                        assert_eq!(model.get(&amp;k), <br/>                        system_under_test.get(&amp;k));
                    }
                }
            }
            TestResult::passed()
        }
        QuickCheck::new().quickcheck(property as fn(Vec&lt;Action&lt;u8&gt;&gt;) -&gt; <br/>                                     TestResult);
    }<br/>}</pre>
<p>Hopefully, this looks familiar to our previous QuickCheck test. Again, we have an inner property function that does the actual work and we request that QuickCheck run this property test over arbitrary vectors of <kbd>Action&lt;u8&gt;</kbd>. For every action present in the vector we apply them to both the model and the system under test, validating that the results are the same. The <kbd>u8</kbd> type was intentionally chosen here compared to a large domain type such as <kbd>u64.</kbd> One of the key challenges of writing QuickCheck tests is probing for extremely unlikely events. QuickCheck is blind in the sense that it's possible for the same path to be chosen through the program for each run if that path is the most likely path to be chosen. While millions of QuickCheck tests can give high confidence in fitness for purpose the blind nature of the runs means that QuickCheck should also be paired with tools known as fuzzers. These do not check the correct function of a program against a model. Instead, their sole purpose is to validate the absence of program crashes.</p>


            </article>

            
        </section>
    </div></body>
</html>