<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Unit testing</h1>
                </header>
            
            <article>
                
<p>Unit testing focuses on testing internal interfaces and components of a program. It is also called <strong>whitebox testing</strong>. To first create unit tests, it is a good idea to look at all of the top-level types, traits, and functions. All top-level identifiers make for good test cases. Depending on the structure of the program, it may also be a good idea to test combinations of these components to cover expected use cases.</p>
<p>We have one utility function, the statistic calculation, which would be a good candidate to write a unit test for. However, this function doesn't return any result. Instead, it immediately prints output to the console. To test this, we should break the function into two components—one that calculates the statistics, and a second function that prints the statistics. This would look as follows:</p>
<pre style="padding-left: 30px" class="p1"><span class="s1">fn variable_summary&lt;W: Write&gt;(stdout: &amp;mut raw::RawTerminal&lt;W&gt;, vname: &amp;str, data: Vec&lt;f64&gt;)<br/>{<br/></span><span class="s1">   let (avg, dev) = variable_summary_stats(data);<br/></span><span class="s1">   variable_summary_print(stdout, vname, avg, dev);<br/></span><span class="s1">}<br/><br/>fn variable_summary_stats(data: Vec&lt;f64&gt;) -&gt; (f64, f64)<br/></span><span class="s1">{<br/></span><span class="s1">   //calculate statistics<br/></span><span class="s1">   let N = data.len();<br/></span><span class="s1">   let sum: f64 = data.iter().sum();</span><span class="s1"><br/></span><span class="s1">   let avg = sum / (N as f64);<br/></span><span class="s1">   let dev = (<br/></span><span class="s1">      data.clone().into_iter()<br/></span><span class="s1">      .map(|v| (v - avg).powi(2))<br/></span><span class="s1">      .fold(0.0, |a, b| a+b)<br/></span><span class="s1">      / (N as f64)<br/></span><span class="s1">   ).sqrt();<br/></span><span class="s1">   (avg, dev)<br/></span><span class="s1">}<br/><br/></span><span class="s1">fn variable_summary_print&lt;W: Write&gt;(stdout: &amp;mut raw::RawTerminal&lt;W&gt;, vname: &amp;str, avg: f64, dev: f64)<br/></span><span class="s1">{<br/></span><span class="s1">   //print formatted output<br/></span><span class="s1">   write!(stdout, "Average of {:25}{:.6}\r\n", vname, avg);<br/></span><span class="s1">   write!(stdout, "Standard deviation of {:14}{:.6}\r\n", vname, dev);<br/></span><span class="s1">   write!(stdout, "\r\n");<br/></span><span class="s1">}</span></pre>
<p class="p1">Now that we have isolated the statistics calculation into its own function, we can write unit tests for it much more easily. First, we supply some test data, and then verify each result. Also note that unit tests have access to private functions as long as we add <span class="s1"><kbd>use super::*;</kbd> to the test declaration. Here are some unit tests for our statistics calculation:</span></p>
<pre style="padding-left: 30px" class="p1"><span class="s1">#[cfg(test)]<br/></span><span class="s1">mod tests {<br/></span><span class="s1">   use super::*;<br/><br/></span><span class="s1">   #[test]<br/></span><span class="s1">   fn variable_stats() {<br/></span><span class="s1">      let test_data = vec![<br/></span><span class="s1">         (vec![1.0, 2.0, 3.0, 4.0, 5.0], 3.0, 1.41),<br/></span><span class="s1">         (vec![1.0, 3.0, 5.0, 7.0, 9.0], 5.0, 2.83),<br/></span><span class="s1">         (vec![1.0, 9.0, 1.0, 9.0, 1.0], 4.2, 3.92),<br/></span><span class="s1">         (vec![1.0, 0.5, 0.7, 0.9, 0.6], 0.74, 0.19),<br/></span><span class="s1">         (vec![200.0, 3.0, 24.0, 92.0, 111.0], 86.0, 69.84),<br/></span><span class="s1">      ];<br/></span><span class="s1">      for (data, avg, dev) in test_data<br/></span><span class="s1">      {<br/></span><span class="s1">         let (ravg, rdev) = variable_summary_stats(data);<br/>         //it is not safe to use direct == operator on floats<br/>         //floats can be *very* close and not equal<br/>         //so instead we check that they are very close in value<br/></span><span class="s1">         assert!( (avg-ravg).abs() &lt; 0.1 );<br/></span><span class="s1">         assert!( (dev-rdev).abs() &lt; 0.1 );<br/></span><span class="s1">      }<br/></span><span class="s1">   }<br/></span><span class="s1">}</span></pre>
<p>Now, if we run <kbd>cargo test</kbd>, the unit tests will run. The result should show one test passing.</p>


            </article>

            
        </section>
    </div></body>
</html>