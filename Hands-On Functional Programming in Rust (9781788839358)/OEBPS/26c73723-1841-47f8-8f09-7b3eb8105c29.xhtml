<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">What this book covers</h1>
                </header>
            
            <article>
                
<p><a href="9221248a-8815-4394-8042-b2b5bb10cd5e.xhtml">Chapter 1</a>, <em>Functional Programming <span>– a Comparison</span></em><span>, introduces functional programming in Rust. Comparisons are drawn between functional style and other paradigms that are prevalent or influential to Rust. The chapter also serves as a brief outline of topics that will appear later in the book.</span></p>
<p><a href="bf10aff4-ca84-44a7-a982-b156c9cde41e.xhtml">Chapter 2</a>, <em>Functional Control Flow</em><span>, introduces Rust control flow structures while explaining how they are relevant to the functional style of programming. The expression-centric nature of functional programming and Rust is illustrated through examples. Limiting as it may be, the chapter also begins an ongoing project using only the procedural expression style of programming.</span></p>
<p><a href="a7c186b6-4fab-40d8-a684-bc0cc5695ab6.xhtml">Chapter 3</a>, <em>Functional Data Structures</em><span>, introduces the reader to the various, highly expressive  data types available in Rust. Notably, the enum type is introduced, which holds particular significance in functional programming. The project continues to grow to incorporate a variety of these data types.</span></p>
<p><a href="17b4796f-bd1b-4844-afe2-46653b0792f8.xhtml">Chapter 4</a>, <em>Generics and Polymorphism</em><span>, explains the concepts of parameterization of data (generics) and parameterization of control flow (polymorphism). Parameterization and its natural interaction with traits reduces the programmer's burden, but the syntax can become overwhelming. Some approaches to reduce or mitigate parameter explosion are introduced. The ongoing project again grows to incorporate these features.</span></p>
<p><a href="1424cb34-bb60-4cd3-9490-559e041251ed.xhtml">Chapter 5</a>, <em>Code Organization and Application Architecture</em><span>, talks about some architectural concerns, recommendations, and best practices. Designing and managing the implementation of a software project is not formulaic. No project is the same, and few are highly similar, thus no engineering procedure can capture the nuances of software development. In this chapter, we provide the best tools available, and specifically, the best that functional programmin</span>g <span>has to offer.</span></p>
<p><a href="b2733e9a-c163-4204-9a6e-6b1a2b8af397.xhtml">Chapter 6</a>, <em>Mutability, Ownership, and Pure Functions</em><span>, digs into some of the more unique features in Rust. This chapter introduces the concepts of ownership and lifetimes, which are common stumbling blocks when learning Rust. The functional concepts of immutability and pure functions are also introduced to help untangle some of the spaghetti that a naive Rust programmer might generate when attempting to circumvent the rules of ownership in Rust.</span></p>
<p><a href="c696c1cd-80aa-4ffe-a4e5-c7d9bcdcc430.xhtml">Chapter 7</a>, <em>Design Patterns</em><span>, lists as many functional programming cheat codes that can fit into a single chapter. The concept of functors and monads are explained with examples and some casual definitions. The chapter also briefly introduces the style of functional reactive programming and uses it to build a quick and dirty web framework.</span></p>
<p><a href="3066190b-837d-4a1e-b919-2bd04e810c41.xhtml">Chapter 8</a>, <em>Implementing Concurrency</em><span>, explains how to do multiple things at the same time. Most of the chapter is spent clarifying the differences and relative strengths and weaknesses between subprocesses, forked processes, and threads. The Rust thread concurrency model is then assumed and more information is provided to clarify Rust-specific logic regarding threads. Toward the end of the chapter, the actor model of concurrency is introduced, which is a robust model of concurrency that can adapt to most situations and programming paradigms.</span></p>
<p><a href="c9c0719e-d50d-462a-b6e5-e8c02a1ee67e.xhtml">Chapter 9</a>, <em>Performance, Debugging, and Metaprogramming</em><span>, wraps up the book with some miscellaneous tips for programming in Rust. The performance tips are not particularly functional, but rather concerned primarily with language-specific details, general advice, or relevant bits of computer science. Debugging introduces many tips on how to prevent bugs. Also, how to use an interactive debugger is explained through examples. Metaprogramming explains precisely how Rust macros and procedural macros work. This is a great feature of Rust, but is not documented well, so it might be scary to approach.</span></p>


            </article>

            
        </section>
    </div></body>
</html>