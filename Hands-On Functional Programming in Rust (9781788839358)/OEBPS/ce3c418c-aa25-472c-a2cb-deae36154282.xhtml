<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Finding and fixing bugs</h1>
                </header>
            
            <article>
                
<p>Debugging tools are quite platform dependent. Here we will explain <kbd>lldb</kbd>, which is available, and macOS and other Unix-like systems.</p>
<p>To start debugging, you will need to compile the program with debugging symbols turned on. The normal <kbd>cargo debug build</kbd> is usually sufficient:</p>
<pre><strong>cargo build</strong></pre>
<p>After the program has been compiled, start the debugger:</p>
<pre class="p1"><strong><span class="s1">$ sudo rust-lldb target/debug/deps/performance_polynomial3-8048e39c94dd7157</span></strong></pre>
<p>Here we reference the <kbd>debugs/deps/program_name-GITHASH</kbd> copy of the program. This is necessary for now just because of how lldb works.</p>
<p>After running <kbd>lldb</kbd>, you will see some information scroll past on startup. Then, you should be dropped into a LLDB Command Prompt:</p>
<pre class="p1"><span class="s1">(lldb) command source -s 0 '/tmp/rust-lldb-commands.YnRBkV'<br/></span><span class="s1">Executing commands in '/tmp/rust-lldb-commands.YnRBkV'.<br/></span><span class="s1">(lldb) command script import "/Users/andrewjohnson/.rustup/toolchains/nightly-x86_64-apple-darwin/lib/rustlib/etc/lldb_rust_formatters.py"<br/></span><span class="s1">(lldb) type summary add --no-value --python-function lldb_rust_formatters.print_val -x ".*" --category Rust<br/></span><span class="s1">(lldb) type category enable Rust<br/></span><span class="s1">(lldb) target create "target/debug/deps/performance_polynomial3-8048e39c94dd7157"<br/></span><span class="s1">Current executable set to 'target/debug/deps/performance_polynomial3-8048e39c94dd7157' (x86_64).<br/>(lldb)<br/></span></pre>
<p>Now, set a breakpoint. We will set a breakpoint to stop at function <kbd>a</kbd>:</p>
<pre class="p1"><span class="s1">(lldb) </span><span class="s2">b a<br/></span><span class="s1">Breakpoint 1: where = performance_polynomial3-8048e39c94dd7157`performance_polynomial3::a::h0b267f360bbf8caa + 12 at performance_polynomial3.rs:3, address = 0x000000010000191c</span></pre>
<p>Now that our breakpoint is set, run the <kbd>r</kbd> command:</p>
<pre class="p1"><span class="s1">(lldb) </span><span class="s2">r<br/></span><span class="s1">Process 99468 launched: '/Users/andrewjohnson/subarctic.org/subarctic.org/Hands-On-Functional-Programming-in-RUST/Chapter09/target/debug/deps/performance_polynomial3-8048e39c94dd7157' (x86_64)<br/></span><span class="s1">Process 99468 stopped<br/></span><span class="s1">* thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1<br/></span><span class="s1">  frame #0: 0x000000010000191c performance_polynomial3-8048e39c94dd7157`performance_polynomial3::a::h0b267f360bbf8caa(n=1000) at performance_polynomial3.rs:3<br/></span><span class="s1">   1 <span class="Apple-converted-space">  <span class="Apple-tab-span"> </span></span>fn a(n: u64) {<br/></span><span class="s1">   2<span class="Apple-converted-space">   <span class="Apple-tab-span"> </span>   </span>//Is this O(n);<br/></span><span class="s1">-&gt; 3<span class="Apple-converted-space">   <span class="Apple-tab-span"> </span>   </span>for _ in 0..n {<br/></span><span class="s1">   4 <span class="Apple-converted-space">  <span class="Apple-tab-span"> </span>      </span>b(n);<br/></span><span class="s1">   5<span class="Apple-converted-space">   <span class="Apple-tab-span"> </span>   </span>}<br/></span><span class="s1"><span class="Apple-converted-space">   </span>6 <span class="Apple-converted-space">  <span class="Apple-tab-span"> </span></span>}<br/></span><span class="s1"><span class="Apple-converted-space">   </span>7<span class="Apple-converted-space">   <span class="Apple-tab-span"> <br/></span></span></span><span class="s1">Target 0: (performance_polynomial3-8048e39c94dd7157) stopped.</span></pre>
<p>After stopping at the breakpoint, LLDB will print some context for where the code is stopped at. Now we can inspect the program. Let's print what variables are defined in this function:</p>
<pre class="p2"><span class="s3">(lldb) </span><span class="s1">frame variable<br/></span><span class="s1">(unsigned long) n = 1000</span></pre>
<p>We can similarly print any variable in scope:</p>
<pre class="p1"><span class="s1">(lldb) </span><span class="s2">p n<br/></span><span class="s1">(unsigned long) $0 = 1000</span></pre>
<p>When we want to continue the program, type <kbd>c</kbd> to continue:</p>
<pre class="p1"><span class="s1">(lldb) </span><span class="s2">c<br/></span><span class="s1">Process 99468 resuming<br/></span><span class="s1">Process 99468 exited with status = 0 (0x00000000)</span></pre>
<p>The program exits here because we did not set any more breakpoints. This method of debugging is nice because it allows you to inspect a running program without constantly adding <kbd>println!</kbd> statements and recompiling. If nothing else works, that is still an option though.</p>


            </article>

            
        </section>
    </div></body>
</html>