<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Defining lifetime subtyping</h1>
                </header>
            
            <article>
                
<p>It is possible to have a single object that requires a long lifetime for itself but also needs a shorter lifetime for some of its components or methods. This can be accomplished by parameterizing multiple lifetimes. This usually works well unless the lifetimes come into conflict. The following is an example of multiple lifetimes:</p>
<pre class="p1"><span class="s1">struct Context&lt;'s&gt;(&amp;'s mut String);<br/><br/></span><span class="s1">impl&lt;'s&gt; Context&lt;'s&gt;<br/></span><span class="s1">{<br/></span><span class="s1">   fn mutate&lt;'c&gt;(&amp;mut self, cs: &amp;'c mut String) -&gt; &amp;'c mut String</span></pre>
<pre class="p1"><span class="s1"><br/></span><span class="s1">   {<br/></span><span class="s1">      let swap_a = self.0.pop().unwrap();<br/></span><span class="s1">      let swap_b = cs.pop().unwrap();<br/></span><span class="s1">      self.0.push(swap_b);<br/></span><span class="s1">      cs.push(swap_a);<br/></span><span class="s1">      cs<br/></span><span class="s1">   }<br/></span><span class="s1">}<br/><br/></span>fn main() {<br/><span class="s1">   let mut s = "outside string context abc".to_string();<br/></span><span class="s1">   {<br/></span><span class="s1">      //temporary context<br/></span><span class="s1">      let mut c = Context(&amp;mut s);<br/></span><span class="s1">      {<br/></span><span class="s1">         //further temporary context<br/></span><span class="s1">         let mut s2 = "inside string context def".to_string();<br/></span><span class="s1">         c.mutate(&amp;mut s2);<br/></span><span class="s1">         println!("s2 {}", s2);<br/></span><span class="s1">      }<br/></span><span class="s1">   }<br/></span><span class="s1">   println!("s {}", s);<br/></span>}</pre>


            </article>

            
        </section>
    </div></body>
</html>