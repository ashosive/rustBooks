<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Performance, Debugging, and Metaprogramming</h1>
                </header>
            
            <article>
                
<ol>
<li>How is release mode different from debug mode?</li>
</ol>
<p style="padding-left: 60px">That depends on your Cargo configuration. By default, there are several compiler flags that have different default values in release versus debug mode. One such flag is the opt-level that gets sent to the llvm code generation—the default debug opt-level is 2, and the default release opt-level is 3. These defaults can be changed in <kbd>Cargo.toml</kbd>.</p>
<ol start="2">
<li>How long will an empty loop take to run?</li>
</ol>
<p style="padding-left: 60px">Test it out. Otherwise, it is hard to say for sure on every platform. loop will always be an infinite loop. while true should maybe also be an infinite loop, but will generate a warning. <kbd>for _ in 0..99999999 {}</kbd> will be removed at opt-level 3 but not opt-level 2.</p>
<ol start="3">
<li>What is linear time in Big <em>O</em> notation?</li>
</ol>
<p style="padding-left: 60px">Linear time is <em>O</em>(<em>n</em>) time.</p>
<ol start="4">
<li>Name a function that grows faster than exponential growth.</li>
</ol>
<p style="padding-left: 60px">Factorial <em>O</em>(<em>n</em>!) grows faster than exponential growth.</p>
<ol start="5">
<li> What is faster, a disk read or a network read?</li>
</ol>
<p style="padding-left: 60px">Measure it. There are many physical factors to consider here.</p>
<ol start="6">
<li>How would you return a Result with multiple error conditions?</li>
</ol>
<p style="padding-left: 60px">Rust recommends using enum types to describe multiple error conditions. Being lazy, you could also use the <kbd>std::any::Any</kbd> type.</p>
<ol start="7">
<li>What is a token tree?</li>
</ol>
<p style="padding-left: 60px">A token tree is a tree data structure containing tokens. As a result of Rust lexing, (...), [...], and {...} token groups will become their own branches.</p>
<ol start="8">
<li>What is an Abstract Syntax Tree?</li>
</ol>
<p style="padding-left: 60px">An abstract syntax tree is like a token tree but it has a strict structure such that only well-formed (Rust) code can be represented by it.</p>
<ol start="9">
<li>Why do procedural macros need to be compiled separately?</li>
</ol>
<p style="padding-left: 60px">Procedural macros are written with normal Rust code. To be used in compilation, procedural macros need to have already been compiled.</p>


            </article>

            
        </section>
    </div></body>
</html>