<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Writing the analyze_trip.rs executable</h1>
                </header>
            
            <article>
                
<p>The analyze trip executable will only change a little bit, but only to accommodate symbols that have been moved and types that are now serializable with SerDe. The result is as follows:</p>
<ol>
<li>Define the <kbd>Trip</kbd> data structure:</li>
</ol>
<pre style="padding-left: 30px">#[derive(Clone)]<br/>struct Trip {<br/>   dst: u64,<br/>   up: f64,<br/>   down: f64<br/>}</pre>
<ol start="2">
<li>Initialize the variables:</li>
</ol>
<pre style="padding-left: 30px">let simlog = File::open("simulation.log").expect("read simulation log");<br/>let mut simlog = BufReader::new(&amp;simlog);<br/>let mut jerk = 0.0;<br/>let mut prev_est: Option&lt;ElevatorState&gt; = None;<br/>let mut dst_timing: Vec&lt;Trip&gt; = Vec::new();<br/>let mut start_location = 0.0;</pre>
<ol start="3">
<li>Iterate over log lines and initialize the elevator specification:</li>
</ol>
<pre style="padding-left: 30px"><span class="s1">let mut first_line = String::new();<br/></span><span class="s1">let len = simlog.read_line(&amp;mut first_line).unwrap();<br/></span>let spec: u64 = serde_json::from_str(&amp;first_line).unwrap();<br/>let esp: Box&lt;Building&gt; = buildings::deserialize(spec);<br/><br/>for line in simlog.lines() {<br/>   let l = line.unwrap();<br/>   //Check elevator state records<br/>}</pre>
<ol start="4">
<li>Check the elevator state records:</li>
</ol>
<pre style="padding-left: 30px">let (est, dst): (ElevatorState,u64) = serde_json::from_str(&amp;l).unwrap();<br/>let dl = dst_timing.len();<br/>if dst_timing.len()==0 || dst_timing[dl-1].dst != dst {<br/>   dst_timing.push(Trip { dst:dst, up:0.0, down:0.0 });<br/>}<br/><br/>if let Some(prev_est) = prev_est {<br/>   let dt = est.timestamp - prev_est.timestamp;<br/>   if est.velocity &gt; 0.0 {<br/>      dst_timing[dl-1].up += dt;<br/>   } else {<br/>      dst_timing[dl-1].down += dt;<br/>   }<br/>   let da = (est.acceleration - prev_est.acceleration).abs();<br/>   jerk = (jerk * (1.0 - dt)) + (da * dt);<br/>   if jerk.abs() &gt; 0.22 {<br/>      panic!("jerk is outside of acceptable limits: {} {:?}", jerk, est)<br/>   }<br/>} else {<br/>   start_location = est.location;<br/>}<br/><br/>if est.acceleration.abs() &gt; 2.2 {<br/>   panic!("acceleration is outside of acceptable limits: {:?}", est)<br/>}<br/><br/>if est.velocity.abs() &gt; 5.5 {<br/>   panic!("velocity is outside of acceptable limits: {:?}", est)<br/>}<br/><br/>prev_est = Some(est);</pre>
<ol start="5">
<li>Check that the elevator does not backup:</li>
</ol>
<pre style="padding-left: 30px">//elevator should not backup<br/>let mut total_time = 0.0;<br/>let mut total_direct = 0.0;<br/>for trip in dst_timing.clone()<br/>{<br/>   total_time += (trip.up + trip.down);<br/>   if trip.up &gt; trip.down {<br/>      total_direct += trip.up;<br/>   } else {<br/>      total_direct += trip.down;<br/>   }<br/>}<br/><br/>if (total_direct / total_time) &lt; 0.9 {<br/>   panic!("elevator back up is too common: {}", total_direct / total_time)<br/>}</pre>
<ol start="6">
<li>Check that the trips finish within 20% of their theoretical limit:</li>
</ol>
<pre style="padding-left: 30px">let mut trip_start_location = start_location;<br/>let mut theoretical_time = 0.0;<br/>let floor_heights = esp.get_floor_heights();<br/>for trip in dst_timing.clone()<br/>{<br/>   let next_floor = getCumulativeFloorHeight(floor_heights.clone(), trip.dst);<br/>   let d = (trip_start_location - next_floor).abs();<br/>   theoretical_time += (<br/>      2.0*(MAX_ACCELERATION / MAX_JERK) +<br/>      2.0*(MAX_JERK / MAX_ACCELERATION) +<br/>      d / MAX_VELOCITY<br/>   );<br/>   trip_start_location = next_floor;<br/>}<br/><br/>if total_time &gt; (theoretical_time * 1.2) {<br/>   panic!("elevator moves to slow {} {}", total_time, theoretical_time * 1.2)<br/>}</pre>


            </article>

            
        </section>
    </div></body>
</html>