<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section data-type="preface" epub:type="preface" data-pdf-bookmark="Preface"><div class="preface" id="preface">
<h1>Preface</h1>

<p>Rust is a language for <a contenteditable="false" data-primary="systems programming" data-type="indexterm" id="idm45251674508984"/>systems programming.</p>

<p>This bears some explanation these days, as systems programming is unfamiliar to most working programmers. Yet it underlies everything we do.</p>

<p>You close your laptop. The operating system detects this, suspends all the running programs, turns off the screen, and puts the computer to sleep. Later, you open the laptop: the screen and other components are powered up again, and each program is able to pick up where it left off. We take this for granted. But systems programmers wrote a lot of code to make that happen.</p>

<p>Systems programming is for:</p>

<ul>
	<li><p>Operating systems</p></li>
	<li><p>Device drivers of all kinds</p></li>
	<li><p>Filesystems</p></li>
	<li><p>Databases</p></li>
	<li><p>Code that runs in very cheap devices, or devices that must be extremely reliable</p></li>
	<li><p>Cryptography</p></li>
	<li><p>Media codecs (software for reading and writing audio, video, and image files)</p></li>
	<li><p>Media processing (for example, speech recognition or photo editing software)</p></li>
	<li><p>Memory management (for example, implementing a garbage collector)</p></li>
	<li><p>Text rendering (the conversion of text and fonts into pixels)</p></li>
	<li><p>Implementing higher-level programming languages (like JavaScript and Python)</p></li>
	<li><p>Networking</p></li>
	<li><p>Virtualization and software containers</p></li>
	<li class="pagebreak-before"><p>Scientific simulations</p></li>
	<li><p>Games</p></li>
</ul>

<p><a contenteditable="false" data-primary="resource-constrained programming" data-type="indexterm" id="idm45251674712376"/>In short, systems programming is <em>resource-constrained</em> programming. It is programming when every byte and every CPU cycle counts.</p>

<p>The amount of systems code involved in supporting a basic app is staggering.</p>

<p>This book will not teach you systems programming. In fact, this book covers many details of memory management that might seem unnecessarily abstruse at first, if you haven’t already done some systems programming on your own. But if you are a seasoned systems programmer, you’ll find that Rust is something exceptional: a new tool that eliminates major, well-understood problems that have plagued a whole industry for decades.</p>

<section data-type="sect1" data-pdf-bookmark="Who Should Read This Book"><div class="sect1" id="who-should-read-this-book">
<h1>Who Should Read This Book</h1>

<p>If you’re already a systems programmer, and you’re ready for an alternative to C++, this book is for you. If you’re an experienced developer in any programming language, whether that’s C#, Java, Python, JavaScript, or something else, this book is for you too.</p>

<p>However, you don’t just need to learn Rust. To get the most out of the language, you also need to gain some experience with systems programming. We recommend reading this book while also implementing some systems programming side projects in Rust. Build something you’ve never built before, something that takes advantage of Rust’s speed, concurrency, and safety. The list of topics at the beginning of this preface should give you some ideas.</p>
</div></section>

<section data-type="sect1" data-pdf-bookmark="Why We Wrote This Book"><div class="sect1" id="why-we-wrote-this-book">
<h1>Why We Wrote This Book</h1>

<p>We set out to write the book we wished we had when we started learning Rust. Our goal was to tackle the big, new concepts in Rust up front and head-on, presenting them clearly and in depth so as to minimize learning by trial and error.</p>
</div></section>

<section data-type="sect1" data-pdf-bookmark="Navigating This Book"><div class="sect1" id="navigating-this-book">
<h1>Navigating This Book</h1>

<p>The first two chapters of this book introduce Rust and provide a brief tour before we move on to the fundamental data types in <a data-type="xref" href="ch03.xhtml#basic-types">Chapter 3</a>. Chapters <a data-type="xref" data-xrefstyle="select:labelnumber" href="ch04.xhtml#ownership">4</a> and <a data-type="xref" data-xrefstyle="select:labelnumber" href="ch05.xhtml#references">5</a> address the core concepts of ownership and references. We recommend reading these first five chapters through in order.</p>

<p>Chapters 6 through 10 cover the basics of the language: expressions (<a data-type="xref" href="ch06.xhtml#expressions">Chapter 6</a>), error handling (<a data-type="xref" href="ch07.xhtml#error-handling">Chapter 7</a>), crates and modules (<a data-type="xref" href="ch08.xhtml#crates-and-modules">Chapter 8</a>), structs (<a data-type="xref" href="ch09.xhtml#structs">Chapter 9</a>), and enums and patterns (<a data-type="xref" href="ch10.xhtml#enums-and-patterns">Chapter 10</a>). It’s all right to skim a little here, but don’t skip the chapter on error handling. Trust us.</p>

<p><a data-type="xref" href="ch11.xhtml#traits-and-generics">Chapter 11</a> covers traits and generics, the last two big concepts you need to know. Traits are like interfaces in Java or C#. They’re also the main way Rust supports integrating your types into the language itself. <a data-type="xref" href="ch12.xhtml#operator-overloading">Chapter 12</a> shows how traits support operator overloading, and <a data-type="xref" href="ch13.xhtml#utility-traits">Chapter 13</a> covers many more utility traits.</p>

<p>Understanding traits and generics unlocks the rest of the book. Closures and iterators, two key power tools that you won’t want to miss, are covered in Chapters <a data-type="xref" data-xrefstyle="select:labelnumber" href="ch14.xhtml#closures">14</a> and <a data-type="xref" data-xrefstyle="select:labelnumber" href="ch15.xhtml#iterators">15</a>, respectively. You can read the remaining chapters in any order, or just dip into them as needed. They cover the rest of the language: collections (<a data-type="xref" href="ch16.xhtml#collections">Chapter 16</a>), strings and text (<a data-type="xref" href="ch17.xhtml#strings-and-text">Chapter 17</a>), input and output (<a data-type="xref" href="ch18.xhtml#input-and-output">Chapter 18</a>), concurrency (<a data-type="xref" href="ch19.xhtml#concurrency">Chapter 19</a>), macros (<a data-type="xref" href="ch20.xhtml#macros">Chapter 20</a>), and unsafe code (<a data-type="xref" href="ch21.xhtml#unsafe-code">Chapter 21</a>).</p>
</div></section>

<section data-type="sect1" data-pdf-bookmark="Conventions Used in This Book"><div class="sect1" id="conventions-used-in-this-book">
<h1>Conventions Used in This Book</h1>

<p>The following typographical conventions are used in this book:</p>

<dl>
	<dt><em>Italic</em></dt>
	<dd>Indicates new terms, URLs, email addresses, filenames, and file extensions.</dd>
	<dt><code>Constant width</code></dt>
	<dd>Used for program listings, as well as within paragraphs to refer to program elements such as variable or function names, databases, data types, environment variables, statements, and keywords.</dd>
	<dt><strong><code>Constant width bold</code></strong></dt>
	<dd>Shows commands or other text that should be typed literally by the user.</dd>
	<dt><em><code>Constant width italic</code></em></dt>
	<dd>Shows text that should be replaced with user-supplied values or by values determined by context.</dd>
</dl>

<div data-type="tip"><h6>Tip</h6>
<p>This icon signifies a tip or suggestion.</p>
</div>

<div data-type="note" epub:type="note"><h6>Note</h6>
<p>This icon signifies a general note.</p>
</div>

<div data-type="warning" epub:type="warning"><h6>Warning</h6>
<p>This icon indicates a warning or caution.</p>
</div>
</div></section>

<section data-type="sect1" data-pdf-bookmark="Using Code Examples"><div class="sect1" id="using-code-examples">
<h1>Using Code Examples</h1>
<!--p><strong><em>XXX PROD: Please reach out to author to find out if they will be uploading code examples to oreilly.com or their own site (e.g., GitHub). If there is no code download, delete this whole section. If there is, when you email digidist with the link, let them know what you filled in for <code>title_title</code> (should be as close to book title as possible, i.e., <code>learning_python_2e</code>). This info will determine where digidist loads the files.</em></strong></p-->

<p>Supplemental material (code examples, exercises, etc.) is available for download at <a class="uri" href="https://github.com/ProgrammingRust"><em>https://github.com/ProgrammingRust</em></a>.</p>

<p>This book is here to help you get your job done. In general, if example code is offered with this book, you may use it in your programs and documentation. You do not need to contact us for permission unless you’re reproducing a significant portion of the code. For example, writing a program that uses several chunks of code from this book does not require permission. Selling or distributing a CD-ROM of examples from O’Reilly books does require permission. Answering a question by citing this book and quoting example code does not require permission. Incorporating a significant amount of example code from this book into your product’s documentation does require permission.</p>

<p>We appreciate, but do not require, attribution. An attribution usually includes the title, author, publisher, and ISBN. For example: “<em>Programming Rust</em> by Jim Blandy and Jason Orendorff (O’Reilly). Copyright 2018 Jim Blandy and Jason Orendorff, 978-1-491-92728-1.”</p>

<p>If you feel your use of code examples falls outside fair use or the permission given above, feel free to contact us at <a href="mailto:permissions@oreilly.com"><em>permissions@oreilly.com</em></a>.</p>
</div></section>

<section data-type="sect1" data-pdf-bookmark="O’Reilly Safari"><div class="sect1" id="_safari_books_online">
<h1>O’Reilly Safari</h1>

<div class="safarienabled" data-type="note" epub:type="note"><h6>Note</h6>
<p><a class="orm:hideurl" href="http://oreilly.com/safari">Safari</a> (formerly Safari Books Online) is a membership-based training and reference platform for enterprise, government, educators, and individuals.</p>
</div>

<p>Members have access to thousands of books, training videos, Learning Paths, interactive tutorials, and curated playlists from over 250 publishers, including O’Reilly Media, Harvard Business Review, Prentice Hall Professional, Addison-Wesley Professional, Microsoft Press, Sams, Que, Peachpit Press, Adobe, Focal Press, Cisco Press, John Wiley &amp; Sons, Syngress, Morgan Kaufmann, IBM Redbooks, Packt, Adobe Press, FT Press, Apress, Manning, New Riders, McGraw-Hill, Jones &amp; Bartlett, and Course Technology, among others.</p>

<p>For more information, please visit <a class="orm:hideurl" href="http://www.oreilly.com/safari"><em>http://oreilly.com/safari</em></a>.</p>
</div></section>

<section data-type="sect1" class="pagebreak-before" data-pdf-bookmark="How to Contact Us"><div class="sect1" id="how-to-contact-us">
<h1>How to Contact Us</h1>

<p>Please address comments and questions concerning this book to the publisher:</p>

<ul class="simplelist">
<li>O’Reilly Media, Inc.</li>
<li>1005 Gravenstein Highway North</li>
<li>Sebastopol, CA 95472</li>
<li>800-998-9938 (in the United States or Canada)</li>
<li>707-829-0515 (international or local)</li>
<li>707-829-0104 (fax)</li>
</ul>
<p>We have a web page for this book, where we list errata, examples, and any additional information. You can access this page at <a href="http://bit.ly/programming-rust"><em>http://bit.ly/programming-rust</em></a>.</p>
<!--p><strong><em>XXX Don't forget to update the link above.</em></strong></p-->

<p>To comment or ask technical questions about this book, send email to <a href="mailto:bookquestions@oreilly.com">bookquestions@oreilly.com</a>.</p>

<p>For more information about our books, courses, conferences, and news, see our website at <a class="uri" href="http://www.oreilly.com"><em>http://www.oreilly.com</em></a>.</p>

<p>Find us on Facebook: <a class="uri" href="http://facebook.com/oreilly"><em>http://facebook.com/oreilly</em></a></p>

<p>Follow us on Twitter: <a class="uri" href="http://twitter.com/oreillymedia"><em>http://twitter.com/oreillymedia</em></a></p>

<p>Watch us on YouTube: <a class="uri" href="http://www.youtube.com/oreillymedia"><em>http://www.youtube.com/oreillymedia</em></a></p>
</div></section>

<section data-type="sect1" data-pdf-bookmark="Acknowledgments"><div class="sect1" id="acknowledgments">
<h1>Acknowledgments</h1>

<p>The book you are holding has benefited greatly from the attention of our official technical reviewers, Brian Anderson, Matt Brubeck, J. David Eisenberg, and Jack Moffitt, and our translator, Hidemoto Nakada (中田 秀基).</p>

<p>Many other unofficial reviewers read early drafts and provided invaluable feedback. We would like to thank Eddy Bruel, Nick Fitzgerald, Michael Kelly, Jeffrey Lim, Jakob Olesen, Gian-Carlo Pascutto, Larry Rabinowitz, Jaroslav Šnajdr, and Joe Walker for their thoughtful comments. Jeff Walden and Nicolas Pierron were especially generous with their time, reviewing almost the entire book. Like any programming venture, a programming book thrives on quality bug reports. Thank you.</p>

<p>Mozilla was extremely accommodating of our work on this project, even though it fell outside our official responsibilities and competed with them for our attention. We are grateful to our managers, Dave Camp, Naveed Ihsanullah, Tom Tromey, and Joe Walker, for their support. They take a long view of what Mozilla is about; we hope these results justify the faith they placed in us.</p>

<p>We would also like to express our appreciation for everyone at O’Reilly who helped bring this project to fruition, especially our editors Brian MacDonald and Jeff Bleiel.</p>

<p>Most of all, our heartfelt thanks to our wives and children for their unwavering love, enthusiasm, and patience.</p>
</div></section>
</div></section></div></body>
</html>