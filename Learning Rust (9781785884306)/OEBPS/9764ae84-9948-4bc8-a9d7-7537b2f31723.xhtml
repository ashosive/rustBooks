<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">The Rust Application Lifetime</h1>
                </header>
            
            <article>
                
<p>Rust, as we have seen, is a very stable language. It is also what can be described as a memory-safe language in that, when the code is compiling, the compiler tests the code to ensure that things don't go wrong, such as accessing outside of an array or freeing memory twice.</p>
<p>This is purely down to Rust obeying three key rulesâ€”ownership, references (or borrowing, as it's more commonly known), and the application lifetime.</p>
<p>In this chapter, we will discuss and see how the three key facets work to ensure that your Rust application always behaves itself. They are as follows:</p>
<ul>
<li>Ownership</li>
<li>Borrowing</li>
<li>Lifetime</li>
</ul>


            </article>

            
        </section>
    </div></body>
</html>