<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Dealing with the unknown</h1>
                </header>
            
            <article>
                
<p>C developers don't always pass parameters between functions that have <em>strong</em> types; rather, they pass a <kbd>void*</kbd> type. This is then cast to be something solid within the receiving function. In a way, this is very similar to passing a generic type between functions.</p>
<p>These have to be dealt with in a different way if you want to access a function within a library that has a <kbd>void*</kbd> as a parameter type.</p>
<p>For example, the C functions may be:</p>
<pre>void output_data(void *data); 
void transformed_data(void *data); </pre>
<p>As we don't have anything in Rust the same as <kbd>void*</kbd>, we need to use a mutable pointer:</p>
<pre>extern crate libc; 
extern "C" 
 { 
    pub fn output_data(arg: *mut libc::c_void); 
    pub fn transformed_data(arg: *mut libc::c_void); 
} </pre>
<p>This will do the job.</p>


            </article>

            
        </section>
    </div></body>
</html>