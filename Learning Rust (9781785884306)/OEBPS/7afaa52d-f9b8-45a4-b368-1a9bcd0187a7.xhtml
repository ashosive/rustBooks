<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Task 1 – cleaning the code (part 1)</h1>
                </header>
            
            <article>
                
<p>If you consider the code examples in <kbd>temperature.rs</kbd>, you will see that some use a tuple and some use a single type <kbd>return</kbd>. While for development this is a fairly acceptable approach, for a release we may want something more structured.</p>
<p>Consider the two functions <kbd>kelvin_to_celcius</kbd> and <kbd>celcius_to_farenheit</kbd>; in order to use them, we need to have two variables:</p>
<pre>let ktoc = kelvin_to_celcius(14.5f32); 
let ctof = celcius_to_fahrenheit(24.3f32); </pre>
<p>There are a number of possible solutions to this problem.</p>
<ul>
<li>Do nothing! Many libraries use multiple variables when the function returns different types.</li>
<li>Implement a trait within the module that tests the return for false and returns either a <kbd>String</kbd> containing the answer or <em>calculation failed</em>.</li>
<li>Define a single <kbd>struct</kbd> for the answer of the form, which is then passed back to the caller, as follows:</li>
</ul>
<pre style="padding-left: 60px">pub struct maths_answersMathsAnswers { 
    calc_complete : bool, 
    fanswer : f32, 
    ianswer : i32, 
}  </pre>
<p>If we remove the first option (after all, what would be the point in doing this as part of a chapter given over to testing what we have covered?), we are left with options 2 - 4 or 3.</p>


            </article>

            
        </section>
    </div></body>
</html>