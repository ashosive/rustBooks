<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Back to threading</h1>
                </header>
            
            <article>
                
<p>Now we have seen how closures work and their importance, we can continue with threading.</p>
<p>If we consider <em><span class="ChapterrefPACKT">Figure 5</span></em>, we can use a closure to return a value from one of the subthreads:</p>
<pre>use std::thread;  
fn main()  
{ 
    let x = 10; 
    thread::spawn(|| (println!("x is {}", x); )); 
} </pre>
<p>Will this work as is? Unfortunately not. We are borrowing <kbd>x</kbd>, which we can't do because of ownership problems. However, we could add <kbd>move</kbd> to the invocation:</p>
<pre>use std::thread;  
fn main()  
{ 
    let x = 10; 
    thread::spawn(move || (println!("x is {}", x); )); 
} </pre>
<p>The thread will take ownership of the copy of <kbd>x</kbd> rather than borrow the value. By taking ownership, Rust prevents a common issue with any form of threading: race conditions. If you recall, from the start of this chapter I said that conventional threading has no guarantees of when a thread will return, which can cause all sorts of issues. Typically, other languages use mutexes to try and prevent the race condition (<kbd>mutex</kbd> stands for mutual exclusion, which should give an idea as to how they work). By taking ownership, Rust does a lot to prevent racing.</p>


            </article>

            
        </section>
    </div></body>
</html>