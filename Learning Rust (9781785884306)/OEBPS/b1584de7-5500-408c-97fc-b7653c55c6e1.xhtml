<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Reading from a file</h1>
                </header>
            
            <article>
                
<p>Here, we are going to use <kbd>std::io</kbd>, <kbd>std::io::prelude::*</kbd> and <kbd>std::fs::File</kbd>. <kbd>std::io</kbd> is the standard input/output library, the <kbd>*</kbd> after prelude means to use anything in the prelude library, and <kbd>std::fs</kbd> is the filesystem library.</p>
<div class="packt_infobox">Filesystem calls are very platform-specific; Windows users use the likes of <kbd>C://Users/Paul/Documents/My Documents</kbd> for the user's home directory, whereas Linux and macOS machines would use <kbd>~/</kbd> for the user's home directory. If a path is not given for a file, the program will assume the file is in the same directory in which the binary resides.</div>


            </article>

            
        </section>
    </div></body>
</html>