<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">The lifetime</h1>
                </header>
            
            <article>
                
<p>Let's consider another piece of code which won't work:</p>
<pre>let varname: &amp;f32; 
{ 
    let x = 3.14f32; 
    varname = &amp;x; 
} 
println!("varname = {}", varname); </pre>
<p>When trying to build this piece of code, the compiler will complain as follows:</p>
<div class="packt_figure CDPAlignCenter CDPAlign"><img height="293" width="500" class=" image-border" src="Images/9ef2317a-854d-4bae-9eb0-16bafec2a057.png"/></div>
<p>You may recall that we had something similar to the following piece of code back in <span class="ChapterrefPACKT">Chapter 4</span>, <em>Conditions, Recursion, and Loops</em>:</p>
<pre>let y: &amp;f32; 
{ 
    let x_squared = x * x; 
    let x_cube = x_squared * x; 
    y = &amp;(x_cube + x_squared + x); 
}; 
println!("Y = {}", *y); </pre>
<p>In <span class="ChapterrefPACKT">Chapter 5</span>, <em>Memory Management</em>, we then explained why the preceding code would not work.</p>
<p>We are assigning <kbd>y</kbd> to the value of a variable that only exists in a small scope and then trying to access that value, which is giving rise to undefined behavior. As we've seen, the Rust compiler will do everything it can to prevent this sort of error. In this case, the compiler keeps track of each and every reference and fails to build if a reference lasts longer than the pointer in use.</p>
<p>We have the same happening here: <kbd>varname</kbd> is declared before <kbd>x</kbd>; therefore, it lives longer than <kbd>x</kbd>, which is what gives rise to the error.</p>
<p>The preceding code is a simple demonstration of a lifetime, but it's not as simple as that.</p>


            </article>

            
        </section>
    </div></body>
</html>