<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Tuples</h1>
                </header>
            
            <article>
                
<p>Here are two ways to initialize a tuple:</p>
<pre>let tup = (3, "foo"); 
let tup: (i32, &amp;str) = (3, "foo"); 
 </pre>
<p>On the first line, we let local type inference work and just declare what is inside the tuple. Rust will figure out the types. On the second line, we declare the types explicitly.</p>
<p>We can have as many (or as few) elements in the list as they are, in fact, an ordered list of a fixed size.</p>
<p>As with other variable types, we can assign one tuple to equal another as long as they contain the same types and number of parameters (arity). For example, the following have the same types and arity and so can be used to assign to each other:</p>
<pre>let mut change = (1.1f32, 1); 
let into = (3.14f32, 6); 
change = into; </pre>
<p>The following wouldn't be allowed as the types don't match, even though the arity does:</p>
<pre>let mut change = (1.1f32, 1); 
let into = (1, 3.14f32); </pre>


            </article>

            
        </section>
    </div></body>
</html>