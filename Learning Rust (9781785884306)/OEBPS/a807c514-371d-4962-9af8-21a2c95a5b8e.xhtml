<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">A practical example</h1>
                </header>
            
            <article>
                
<p>One of the methods in the library takes a vector of <kbd>int</kbd> values to perform a mean, median, and mode calculation, which in turn returns an array of <kbd>float</kbd> values containing these values. However, we need to validate the values first (essentially, test the array is not empty) and that there are five or more values. This will return a boolean.</p>
<p>The unsafe version of the code would be:</p>
<pre>[link(name="mathlib")] 
extern 
 { 
     fn check_mean_mode_median(a: Vec&lt;i32&gt;) -&gt; bool; 
} </pre>
<p>We can create a wrapper for this quite simply:</p>
<pre>pub fn calc_mean_mode_median_check(a:Vec&lt;int32&gt;) -&gt; bool 
 { 
    unsafe 
 { 
        check_mean_mode_median(a) == 0; 
    } 
} </pre>
<p>We expose the safe function to the code and hide (wrap) the unsafe part. Once we have a value of true returned, we know the data is safe to have the calculation.</p>
<p>Now, this is a pretty pointless piece of code (it is simply a test to ensure we have the right number of parameters in the vector). Let's modify this wrapper so that we return a <kbd>Vec&lt;f32&gt;</kbd>, which will  contain <kbd>-999f</kbd>, <kbd>-999f</kbd>, or <kbd>-999f</kbd> if the check fails, or mean, median and mode of the values of the vector.</p>
<p>The issue though is that the original library is in C, so we need to get the results as an array and then put that into a vector.</p>
<p>The first part is making the first check:</p>
<pre>pub fn mean_mode_median(a: Vec&lt;int32&gt;) -&gt; Vec&lt;f32&gt; 
{ 
    // we can have this result outside of the unsafe as it is a guaranteed parameter 
    // it must be mutable as it is used to store the result if the result is returned 
    let mut result = vec![-999f32, -999f32, -999f32]; 
    unsafe 
 { 
        if check_mean_mode_median(a) != 0 
 { 
             return result; 
        } 
 else 
 { 
             let res = calc_mean_median_mode(a); 
              
result = res.to_vec(); 
             return result; 
       
        } 
    } 
} </pre>
<p>Not only do we now have a single call to the external library, but we also have guarantees the compiler needs.</p>


            </article>

            
        </section>
    </div></body>
</html>