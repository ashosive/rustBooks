<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Problem solved – use Mutex</h1>
                </header>
            
            <article>
                
<p>Rust provides us with <kbd>Mutex&lt;T&gt;</kbd>. This works in much the same way as other languages by locking the thread. We implement <kbd>mutex</kbd> in our code like this:</p>
<pre>use std::sync::{Arc, Mutex}; 
use std::thread; 
use std::time::Duration; 
fn main()  
{ 
    let primes = Arc::new(Mutex::new(vec![1,2,3,5,7,9,13,17,19,23])); 
 
    for i in 0..10  
    { 
        let primes = primes.clone(); 
        thread::spawn(move ||  
        {  
            let mut data = primes.lock().unwrap(); 
            data[0] += i;  
        }); 
    } 
    thread::sleep(Duration::from_millis(50)); 
} </pre>
<div class="packt_infobox">The code for this example is in <kbd>Chapter 11/mutex</kbd>.</div>
<p>By using <kbd>lock</kbd>, we only allow a single thread to have access to that data at any one time (it has mutual exclusion). No other thread has access to that value, and if any other thread tries to access the value, it has to wait until the lock is released. When data goes out of scope (when <kbd>i</kbd> is incremented), the lock is released.</p>


            </article>

            
        </section>
    </div></body>
</html>