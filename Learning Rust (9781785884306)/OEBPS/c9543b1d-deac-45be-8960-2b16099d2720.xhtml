<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">'struct</h1>
                </header>
            
            <article>
                
<p>One aspect of many languages that is useful is to have a variable that lives for the lifetime of the entire application. While some purists argue that having a variable that lasts for the life of an application is not good practice, they cannot argue that it has its uses.</p>
<p>Within Rust, we can also do this using a special <kbd>struct</kbd> type, a lifetime <kbd>struct</kbd>:</p>
<pre>let version: &amp;'static str = "v1.3, 22nd May 2016";  </pre>
<p>Local type inference allows us to omit the type when it is not global, so this is equivalent to the above when inside a function:</p>
<pre>let version = "v1.3, 22nd May 2016"; </pre>


            </article>

            
        </section>
    </div></body>
</html>