<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">I can see a problem with this analogy</h1>
                </header>
            
            <article>
                
<p>There was a reason I chose a car. If we think about it, all of the parts aren't really that discrete; the engine requires fuel, the electrics are needed by the engine, but the engine also generates electricity, and so on. In terms of programming, this will lead to a horrid mess.</p>
<p>How can we keep them apart?</p>
<p>The answer is that we use a scope for each. For example, the top level for this crate would be <strong>Car</strong>. We then add <strong>::</strong> followed by the module name (<strong>Car::Engine</strong>, <strong>Car::Fuel</strong>, and so on.). If a module requires access to another module, it can be included using the usual <kbd>use</kbd> directive.</p>
<div class="packt_infobox"><br/>
The name of the crate is the name used when the library is created using cargo. In this example, the command line to create this crate will be as follows:<br/>
<strong>cargo new Car</strong><br/>
Note that we do not use the <kbd>--bin</kbd> flag.</div>
<p>Consider the following example:</p>
<pre>// in Car::Engine 
use Fuel; 
use Electrics; </pre>
<p>If we break the modules down further, we extend the scope in the same way as we did previously in order to access them:</p>
<pre>// in the main code 
use Car::Interior::Audio; 
use Car::Interior::Windows::HeatedRear; </pre>


            </article>

            
        </section>
    </div></body>
</html>