<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Targeting synchronous callbacks</h1>
                </header>
            
            <article>
                
<p>Synchronous callbacks are the simplest to target, as they are normally always on the same thread. Therefore, we don't have to deal with the code being more unsafe than usual, which is normally the case with asynchronous callbacks.</p>
<div class="packt_infobox">The code for this part is in <kbd>Chapter 14/synccallback</kbd>. Instructions for building on Linux, macOS, and Windows are included in the source examples.</div>
<p>Let's deal with the Rust side of the code first. Here, we have three parts:</p>
<ol>
<li>The function for the callback itself:</li>
</ol>
<pre style="padding-left: 60px">extern fn my_callback(percent: i32) 
 { 
     println!("Process is now {}% complete", percent); 
} </pre>
<ol start="2">
<li>The calls to the external code:</li>
</ol>
<pre style="padding-left: 60px">[link(name="external_lib")] 
extern 
 { 
     fn register_callback(call: extern fn(i32)) -&gt; i32; 
     fn do_callback_trigger(); 
} </pre>
<ol start="3">
<li>Fire off the code:</li>
</ol>
<pre style="padding-left: 60px">fn main() 
 { 
    unsafe 
 { 
         register_callback(my_callback); 
         do_callback_trigger(); 
    } 
} </pre>
<p><kbd>register_callback(my_callback)</kbd> and <kbd>fn register_callback(call: extern fn(i32)) -&gt;â†’ i32;</kbd> may look strange at first glance. In a normal function call, the parameters within the braces are passed into the receiving function, which then does something with them.</p>
<p>Here, we are passing a function as the parameter, which we really can't do (or at least shouldn't). Callbacks though are different, as the function is by virtue of the <kbd>extern</kbd> modifier counted as a pointer that takes the returned value from the external library as its own parameter.</p>


            </article>

            
        </section>
    </div></body>
</html>