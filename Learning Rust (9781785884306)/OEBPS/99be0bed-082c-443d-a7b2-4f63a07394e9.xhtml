<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">A generic problem</h1>
                </header>
            
            <article>
                
<p>An aspect of generics is the determination of what <kbd>T</kbd> is and therefore how we can handle it. In C#, we can use <kbd>System.Reflection</kbd> and use the <kbd>GetType</kbd> method to find the type or use <kbd>typeof</kbd> when comparing types.</p>
<div class="packt_infobox">The source code for this part can be found in <kbd>09/generic_typeof</kbd>.</div>
<p>In Rust, we use <kbd>std::any:Any</kbd>. This is a type to emulate dynamic typing:</p>
<div class="CDPAlignCenter CDPAlign"><img src="Images/8ce21c00-2e0f-49bd-8217-fda738ebd239.png" width="585" height="181"/></div>
<p>Just by looking at this output, you may be thinking: <em>What on earth are those numbers? I expected something like f32</em>.</p>
<div class="packt_infobox">The associated code for this part can be found in <kbd>09/generic_typeof_print</kbd>.</div>
<p>What we're seeing here is the <em>ID</em> for the type rather than the type. To actually show the variable type, we have do something slightly different:</p>
<pre class="mce-root">#![feature(core_intrinsics)] <br/>fn display_type&lt;T&gt;(_: &amp;T)<br/>{<br/>  let typename = unsafe {std::intrinsics::type_name::&lt;T&gt;()};<br/>  println!("{}", typename);<br/>}<br/><br/>fn main()<br/>{<br/>  display_type(&amp;3.14f32);<br/>  display_type(&amp;1i32);<br/>  display_type(&amp;1.555);<br/>  display_type(&amp;(vec!(1,3,5)));<br/>}</pre>
<div class="packt_infobox">At the time of writing, this code will only build on the nightly branch. Chances are that by the time you read this book, it will be in the stable branch.</div>
<p>When the preceding code is run on the Rust Playground website, the following results are obtained:</p>
<div class="packt_figure CDPAlignCenter CDPAlign"><img height="135" width="206" src="Images/cb91de1c-1048-4097-82a1-2ee189c3ace9.png"/></div>
<p>While most of the code we have seen many times, we have not yet come across <kbd>unsafe</kbd> and the shebang (<kbd>#!</kbd>) in the code.</p>


            </article>

            
        </section>
    </div></body>
</html>