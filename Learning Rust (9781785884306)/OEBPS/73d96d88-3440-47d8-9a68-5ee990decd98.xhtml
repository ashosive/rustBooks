<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">C structs</h1>
                </header>
            
            <article>
                
<p>Earlier in this chapter, we used a <kbd>struct</kbd> as a parameter. In C, there is nothing to stop the developer passing a structure as a parameter:</p>
<pre>struct MyStruct; 
struct MyOtherStruct; 
void pass_struct(struct MyStruct *arg); 
void pass_struct2(struct MyOtherStruct *arg2); </pre>
<p><kbd>MyStruct</kbd> and <kbd>MyOtherStruct</kbd> are known as opaque structs. The name is exposed, but the private parts aren't.</p>
<p>Handling a <kbd>struct</kbd> within Rust is not as simple as you'd first think, but then it's not that difficult either. The only difference is that we use an empty <kbd>enum</kbd> instead of a <kbd>struct</kbd> when interfacing with the C library. This creates our opaque type that stores the information from the C opaque type. As the <kbd>enum</kbd> is empty, we can't instantiate it and, more importantly, as <kbd>MyStruct</kbd> and <kbd>MyOtherStruct</kbd> aren't the same, we have type-safety and so can't get them mixed up:</p>
<pre>enum MyStruct {}; 
enum MyOtherStruct {}; 
extern "C" 
{ 
    pub fn pass_struct(arg: *mut MyStruct); 
    pub fn pass_struct2(arg: *mut MyOtherStruct); 
} </pre>


            </article>

            
        </section>
    </div></body>
</html>