<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Closures with explicit lifetimes – a special case</h1>
                </header>
            
            <article>
                
<p>As we saw back in <span class="ChapterrefPACKT"><a href="9764ae84-9948-4bc8-a9d7-7537b2f31723.xhtml">Chapter 8</a>, <em>The Rust Application Lifetime</em></span>, there are two main types of scope: global and local. A variable that has a local scope goes out of bounds as soon as it is finished with, whereas a global scope variable is cleaned up when the application terminates. A global scope variable is also given the lifetime marker, <kbd>'</kbd>.</p>
<p>Closures also have different scopes. Typically, they will only be for the lifetime if they are called in, but they can also be global.</p>
<p>A "normal" function (as shown previously) would be as follows:</p>
<pre>fn call_with_three&lt;F&gt;(some_closure: F) -&gt; i32 where F : Fn(i32) -&gt; i32<br/>{<br/>some_closure(3)<br/>}</pre>
<p>Conversely, for a lifetime scope, we would have the following:</p>
<pre>fn call_with_three&lt;'a, F&gt;(some_closure: F) -&gt; i32 where F : Fn(&amp;'a 32) -&gt; i32</pre>
<p>However, this won't compile. The problem is with the scope.</p>
<p>In our first example, the scope is purely for the lifetime of the invocation. In the second, it's for the lifetime of the function (and that is for the entirety of the function), which means that the compiler will see a mutable reference at the same lifetime as the immutable reference.</p>
<p>Although Rust does still allow us to use this, we need to use something called a <strong>higher-ranked trait bounds</strong> (in simple terms, it means that, in order of importance, this trumps something below it). This works by telling the compiler to use the minimum lifetime for the closure to run, which in turn should satisfy the borrow-checker. In this case, we use <kbd>for&lt;...&gt;</kbd>:</p>
<pre>fn call_with_three&lt;'a, F&gt;(some_closure: F) -&gt; i32 where F :&lt;for 'a&gt; Fn(&amp;'a 32) -&gt; i32</pre>


            </article>

            
        </section>
    </div></body>
</html>