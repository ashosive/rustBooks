<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Abstractions</h1>
                </header>
            
            <article>
                
<p>One aspect of any Rust application that holds it above other applications from other languages is that they are really fast and memory-safe. This is down to an ideal called a <strong>zero-cost abstraction</strong>. An abstraction is a way of hoisting a low-level construct higher, making it easier, safer, and more reliable. These are commonly seen in cross-platform libraries where a user interface has a common abstraction layer, so developers only need to say <kbd>var n = new Label {Text = "Hello"};</kbd> to create a label for the UI without needing to know what is going on under the hood.</p>
<p>It is usual that abstractions cause some sort of penalties, meaning that code that uses abstractions would run slower or use more memory than corresponding lower-level code. In terms of Rust, these zero-cost abstractions mean that, in terms of computer resources, they cause no penalties. This is normally performed during compilation; the compiler generates the abstractions and executes them. Once done, the compiler will generate the best possible code.</p>
<p>This does have a problemâ€”the compiler will object to code that the developer considers completely fine. This is because, as people, we don't think the same way as a language does, so what we consider as correct ownership is not how Rust considers it. Thankfully, as time goes on, and you use Rust more, this problem becomes far less of one.</p>


            </article>

            
        </section>
    </div></body>
</html>