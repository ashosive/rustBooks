<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Why is this important?</h1>
                </header>
            
            <article>
                
<p>A very common error in the likes of C# is when you have the following code:</p>
<pre>var myList = new List&lt;int&gt;{1,2,3,4,5,6}; 
var dupVar = myList; 
dupVar.Remove(4); // 4 
foreach(var n in myList) 
    Console.WriteLine(n); </pre>
<p>The output we will get from this may not be as you would expect, which is as follows:</p>
<div class="packt_figure CDPAlignCenter CDPAlign"><img height="138" width="94" class=" image-border" src="Images/45c77806-4885-4d4c-a846-0fd0f236bb2d.png"/></div>
<p>It may be expected that, as we have removed the duplicate from <kbd>dupVar</kbd>, the <kbd>myList</kbd> variable should still have all of the numbers it was set to originally. In this code, what is happening is that <kbd>dupVar</kbd> is known as a copy pointerâ€”we have two variables bound to the same pointer on the stack. While it may not seem that big a deal, we have two variable names that are able to change data. This catches a lot of people out and leads to more memory and content bugs than it is worth.</p>
<p>As Rust only allows one pointer per block, we cannot have the likes of this. Once ownership is transferred, the original bound name can no longer be accessed.</p>


            </article>

            
        </section>
    </div></body>
</html>