<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">String slices</h1>
                </header>
            
            <article>
                
<p>String slices can be confusing at first sight. We define a string slice like this:</p>
<pre>let homeTeam = "Liverpool"; </pre>
<p>Coming from more dynamic languages, you might think that we are assigning the string <kbd>Liverpool</kbd> to the variable binding <kbd>homeTeam</kbd>. That's not exactly what happens, however. The <kbd>homeTeam</kbd> binding is actually a string slice: a reference to a part of the string that actually resides somewhere else.</p>
<p>The string slice is also not mutable.</p>
<p>The following will not work in Rust:</p>
<pre>let homeTeam = "Liverpool"; 
let result = " beat "; 
let awayTeam = "Manchester United"; 
let theString = homeTeam + result + awayTeam; </pre>
<p>The compiler will not allow this, and will give an error as follows:</p>
<div class="packt_figure CDPAlignCenter CDPAlign"><img class=" image-border" src="Images/ae8a60b9-4dcb-4955-b419-ea0687f1ae48.png"/></div>
<p>We cannot concatenate the slice directly, since string slices cannot be mutable. To do that, we need to first convert the string slice into something that is mutable, or build the string with something like the <kbd>format!</kbd> macro. Let's try them both.</p>
<p>Like before, the <kbd>to_owned()</kbd> method takes the slice the method is attached to, and converts it to a <kbd>String</kbd> type:</p>
<pre>fn main() { 
    let homeTeam = "Liverpool"; 
    let result = " beat "; 
    let awayTeam = "Manchester United"; 
     
    let fullLine = homeTeam.to_owned() + result + awayTeam; 
     
    println!("{}", fullLine); 
} </pre>
<div class="packt_infobox">The <kbd>to_owned()</kbd> method is only applied to the first slice. This converts the string slice <kbd>homeTeam</kbd> into a String, and using the <kbd>+</kbd> operator on a String is fine.</div>
<p>When this is built and executed, you will see the following:</p>
<div class="packt_figure CDPAlignCenter CDPAlign"><img class=" image-border" src="Images/610c97d0-1577-48af-a2c0-023c9db32b9c.png"/></div>


            </article>

            
        </section>
    </div></body>
</html>