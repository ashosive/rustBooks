<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Writing a file</h1>
                </header>
            
            <article>
                
<p>Writing to a file is a two-step process: opening the file (possibly creating it if it didn't exist before) and then the writing of the file. This is very similar to how writing to a file in the C family of languages is carried out.</p>
<p>You can create a file for writing in a single call to <kbd>std::fs::<span class="InternetLink">File::create</span></kbd>. The <kbd>open</kbd> method in the same namespace opens a file for reading. If you need more fine-tuned permissions, <kbd>std::fs::OpenOptions::new</kbd> creates an object through which you can tweak the parameters and then open the file.</p>
<p>As with any file operation, anything could fail, so the result should always be checked:</p>
<pre>let file: Result&lt;File,Error&gt; = options.open(path); 
 </pre>
<p>As mentioned before, Rust uses a generic type, <kbd>Result&lt;T,U&gt;</kbd> , quite frequently as an error-trapping mechanism. It encapsulates two values: the left-hand side value is used when the operation succeeds, and the right-hand side value is used when it does not succeed.</p>
<p>Once we have completed the file creation, we can move on to writing to the file.</p>
<p>First, we check the results of the <kbd>Result</kbd> comparison. If an error hasn't been thrown there was no error, and we can then create a <kbd>BufWriter</kbd>:</p>
<pre>let mut writer = BufWriter::new(&amp;file); 
writer.write_all(b"hello text file\n"); </pre>
<p>We don't need to flush the buffer, as <kbd>write_all</kbd> will do that for us (it calls <kbd>flush()</kbd> once completed). If you don't use <kbd>write_all</kbd>, then you need to call <kbd>flush()</kbd> to ensure the buffer is cleared.</p>


            </article>

            
        </section>
    </div></body>
</html>