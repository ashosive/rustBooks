<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">std::ptr</h1>
                </header>
            
            <article>
                
<p>This module provides access for handling raw, unsafe pointers.</p>
<div class="packt_infobox"><span>See <a href="8fe31315-5c12-4aaa-ab08-e4c18c3919f9.xhtml">Chapter 5</a>, <em>Remember, Remember</em>, for more details.</span></div>
<p><strong>Structs, Traits, and Enums</strong></p>
<p><span><strong>Functions</strong>: </span><kbd>copy</kbd><span> (copies </span><kbd>count * size_of&lt;T&gt;</kbd><span> from </span><kbd>src</kbd><span> to </span><kbd>dest</kbd><span>; can overlap), </span><kbd>copy_nonoverlapping</kbd><span> (same as </span><kbd>copy</kbd><span>, except cannot overlap), </span><kbd>drop_in_place</kbd><span> (executes destructor of the pointed-to value), </span><kbd>null</kbd><span> (new null raw pointer), </span><kbd>null_mut</kbd><span> (new null mutable raw pointer), </span><kbd>read</kbd><span> (reads value from </span><kbd>src</kbd><span> without moving it), </span><kbd>read_volatile</kbd><span> (volatile read of the value from </span><kbd>src</kbd><span> without moving it), </span><kbd>replace</kbd><span> (replaces value at </span><kbd>dest</kbd><span> with </span><kbd>src</kbd><span>, returning the old value), </span><kbd>swap</kbd><span> (swaps the values at two mutable locations of the same type), </span><kbd>write</kbd><span> (overwrites the memory location with the value without reading or dropping the old value), </span><kbd>write_bytes</kbd><span> (invokes </span><kbd>memset</kbd><span> on the specified pointer), and </span><kbd>write_volatile</kbd><span> (performs a volatile write of a memory location with a given value).</span></p>


            </article>

            
        </section>
    </div></body>
</html>