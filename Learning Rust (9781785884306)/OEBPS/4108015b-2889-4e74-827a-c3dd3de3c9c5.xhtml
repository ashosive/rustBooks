<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">The difference between println! and println</h1>
                </header>
            
            <article>
                
<p>Up to this point, we've used <kbd>println!</kbd> for outputting text. This is fine, but consider what <kbd>println!</kbd> does. Whenever you see a <kbd>!</kbd> mark, it symbolizes a macro. Macros are used when some part of the function needs to be executed at compile time, rather than at runtime.</p>
<p>Consider the following:</p>
<pre>println!("{}", a); 
Console.WriteLine("{0}", a); </pre>
<p>In C#, the preceding snippet will output a line with the value of <kbd>a</kbd> on the line. In this case, <kbd>a</kbd> can be of any type that supports conversion to a formatted output. The same applies to Rust. A line is output with the value of <kbd>a</kbd>.</p>
<p>The <kbd>println!</kbd> macro is actually implemented in the Rust standard library.</p>


            </article>

            
        </section>
    </div></body>
</html>