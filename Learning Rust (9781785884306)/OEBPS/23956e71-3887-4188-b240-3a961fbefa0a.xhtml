<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Using match with an enum</h1>
                </header>
            
            <article>
                
<p>We have already seen in this chapter how enums can be somewhat tricky to handle. Thankfully, we can use <kbd>match</kbd> on an <kbd>enum</kbd>:</p>
<pre>enum MyFirstEnum 
{ 
    TupleType(f32, i8, String), 
    StructType {varone: i32, vartwo: f64}, 
    NewTypeTuple(i32), 
    SomeVarName 
} 
fn tuple_type(v: f32, c: i8, st: String) {//code} 
fn struct_type(v1: i32, v2: f64) {//code} 
fn new_type_tuple(n: i32) {//code} 
fn process_varname() {//code}  
 
fn match_enum_code(e: MyFirstEnum) 
{ 
match e { 
   MyFirstEnum::SomeVarName =&gt; process_varname(), 
   MyFirstEnum::TupleType(f,i,s) =&gt; tuple_type(f,i,s), 
   MyFirstEnum::StructType(v1,v2) =&gt; struct_type(v1,v2), 
   MyFirstEnum::NewTypeTuple(i) =&gt; new_type_tuple(i) 
}; 
} </pre>
<p>You will notice that in this example, <kbd>_</kbd> is not included. That's because we explicitly match against all the possible choices of the enum, so we don't need a catch-all case. If, for instance, we missed <kbd>NewTypeTuple</kbd>, the code would need to include a catch-all:</p>
<pre>fn match_enum_code(e:MyFirstEnum) 
{ 
match e { 
   MyFirstEnum::SomeVarName =&gt; process_varname(), 
   MyFirstEnum::TupleType(f,i,s) =&gt; tuple_type(f,i,s), 
   MyFirstEnum::StructType(v1,v2) =&gt; struct_type(v1,v2), 
   _ =&gt; return  // breaks out of the match 
}; 
} </pre>


            </article>

            
        </section>
    </div></body>
</html>