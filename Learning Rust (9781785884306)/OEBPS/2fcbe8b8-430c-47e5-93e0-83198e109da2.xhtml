<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Using match with a compound type</h1>
                </header>
            
            <article>
                
<p>A compound type is a type that contains many different typesâ€”a <kbd>struct</kbd> is possibly the simplest example here. The following also applies to enums and tuples.</p>
<p>We can match on a <kbd>struct</kbd> pattern the same way we can match on any other type of pattern, which is shown in the following example:</p>
<pre>struct MyStruct 
{ 
    a: i32, 
    b: i32 
} 
 
fn derp(){ 
    let mystruct=MyStruct{a:1, b:2}; 
    match mystruct { 
        MyStruct{a, b} =&gt; println!("matched the structure"), 
        _ =&gt; println!("didn't match the structure") 
    } 
} </pre>
<p>As described in the matching section, we can ignore parameters in the <kbd>struct</kbd> pattern match using <kbd>..</kbd>, or just throw them away using <kbd>_</kbd>.</p>


            </article>

            
        </section>
    </div></body>
</html>