<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Concurrency in Rust</h1>
                </header>
            
            <article>
                
<p>Computers have come a long way in the last 35 years or so. Originally, we had the likes of the 6502, 6809, and Z80 processors. These were known as <strong>single processing units</strong>; they could only run a single program at a time and software ran in a linear fashion (this meant that performing two tasks at once wasn't possible).</p>
<p>Processors moved on, and from the single processing units (single-core), we moved on to processors that contained multiple processing units (multi-core). Programming languages evolved to allow for this form of processor, and running multiple operations (threads) at the same time became a reality.</p>
<p>Rust, being a very modern language, also has this ability to multiprocess. All of the benefits are available that you would expect from Rust (such as memory safety and avoiding race conditions), but there are some other things that you need to be aware of.</p>
<p>In this chapter, we will:</p>
<ul>
<li>Understand the mechanisms by which Rust performs concurrent processes</li>
<li>Learn how to use threads</li>
<li>See the difference between different threading models</li>
</ul>


            </article>

            
        </section>
    </div></body>
</html>