<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">What's the big deal? That was simple enough!</h1>
                </header>
            
            <article>
                
<p>While on the face of it, using an external library via FFI is not rocket science, it does come with a number of issues. Why do we need to annotate blocks with unsafe even when we are referring to known names in libraries?</p>
<p>As we have seen time and again with Rust, the compiler does an awful lot for the developer that you won't see in many other compilers. It ensures thread safety, that a particular operation can be achieved, the buffers don't overrun, that we don't leave memory unallocated or attempt to deallocate twice, and plenty of other things that ensure that, as far as possible, the code we have will run and remain rock-solid (in terms of reliability).</p>
<p>Unfortunately, with external libraries, all the compiler can do is to expect something from a linked library. Threads may be left hanging or be plain unsafe; there is no guarantee that if I passed in 6 and 0 for a similar division function, what is returned is a number and pretty much anything else can go wrong.</p>
<p>By using <kbd>unsafe</kbd>, we give the compiler a promise that when it links the code, what it links to will be bound correctly.</p>


            </article>

            
        </section>
    </div></body>
</html>