<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Let's not race ahead!</h1>
                </header>
            
            <article>
                
<p>As with anything to do with memory, we do have times where memory is shared between pointers. Typically, when we write an application, we don't consider that, at any given time, there may be multiple threads running at the same time, and while we can fairly accurately predict what will happen by following the flow, we can sometimes face an issue known as a race condition. Quite simply, we don't know which condition will <em>hit</em> first.</p>
<p>Let's look at the following example:</p>
<pre>    // 05/threads-1/src/main.rs<br/>    use std::thread; 
    use std::rc::Rc; 
 
    struct MyCounter 
    { 
        count: i32 
    } 
 
    fn wont_work() 
    { 
        let mut counter = Rc::new(MyCounter {count: 0}); 
        thread::spawn(move || // new thread  
        { 
            counter.count += 1; 
        }); 
        println!("{}", counter.count); 
    } </pre>
<p>This won't compile because the compiler doesn't know which thread will be <kbd>0</kbd> or <kbd>1</kbd>, as they both attempt to access <kbd>counter</kbd> at the same time. In Rust terms, <kbd>counter</kbd> gets moved to the inner thread, which means that it cannot be accessed anywhere else. Reference counting via the <kbd>Rc</kbd> type does not help here, because it's not thread-safe.</p>


            </article>

            
        </section>
    </div></body>
</html>