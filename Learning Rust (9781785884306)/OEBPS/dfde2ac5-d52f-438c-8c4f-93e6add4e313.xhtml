<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">std::sync</h1>
                </header>
            
            <article>
                
<p>This module provides thread synchronization functions.</p>
<div class="packt_infobox"><span>This is covered in </span><span class="ChapterrefPACKT"><a href="636b329f-0544-4c2d-9924-fcd12f105567.xhtml">Chapter 11</a>, <em>Concurrency in Rust</em></span><span>.</span></div>
<p><strong>Structs, Traits, and Enums</strong></p>
<ul>
<li><strong>Structs</strong>: <kbd>Arc</kbd> (atomic ref counted wrapper), <kbd>Barrier</kbd> (enables multiple threads to synchronize the beginning of some computation), <kbd>BarrierWaitResult</kbd> (result from a thread wait), <kbd>Condvar</kbd> (CONDitional VARiable), <kbd>Mutex</kbd> (mutual exclusion primitive), <kbd>MutexGuard</kbd> (scoped lock mutex; becomes unlocked when the structure goes out of scope), <kbd>Once</kbd> (sync primitive used to run a one-time global initialization), <kbd>PoisonError</kbd> (error that can be returned when a lock is required), <kbd>RwLock</kbd> (read/write lock), <kbd>RWLockReadGuard</kbd> (used to release shared read access to a lock when dropped), <kbd>RWWriteGuard</kbd> (used to release shared write access if a lock when dropped), <kbd>WaitTimeoutResult</kbd> (type used to determine whether a condition variable timed out or not), and <kbd>Weak</kbd> (weak pointer to <kbd>Arc</kbd>).</li>
<li><strong>Enum</strong>: <kbd>TryLockError</kbd> (errors that may occur when calling <kbd>try_lock</kbd>).</li>
</ul>
<div class="packt_infobox"><span>See the code examples in </span><span class="ChapterrefPACKT"><a href="636b329f-0544-4c2d-9924-fcd12f105567.xhtml">Chapter 11</a>, <em>Concurrency in Rust</em></span><span>.</span></div>


            </article>

            
        </section>
    </div></body>
</html>