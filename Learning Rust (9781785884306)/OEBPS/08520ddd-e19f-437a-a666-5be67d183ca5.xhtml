<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Let's see dynamic dispatch</h1>
                </header>
            
            <article>
                
<p>Dynamic dispatch uses trait objects. A trait object can store a value of any type that implements the <kbd>trait</kbd>. The actual type of the value is only known at runtime.</p>
<div class="packt_infobox">The code for this section can be found in <kbd>09/dynamic_dispatch</kbd>.</div>
<p>Let's look at some code to explain how this works.</p>
<p>Previously, we had for <kbd>display_code</kbd> the following:</p>
<pre class="mce-root">fn display_code&lt;T: StaticObject&gt;(data: T) <br/>{<br/>  println!("{}", data.static_method()); <br/>}</pre>
<p>We now have this:</p>
<pre class="mce-root">fn display_code(data : &amp;DynamicObject) <br/>{<br/>  println!("{}", data.dynamic_method()); <br/>}</pre>
<p>We no longer have the <kbd>T</kbd> parameter.</p>
<p>In the static version, <kbd>display_code</kbd> was called like this:</p>
<pre class="mce-root">display_code(test_one);</pre>
<p>For the dynamic version, we use the following:</p>
<pre class="mce-root">display_code(&amp;test_one as &amp;DynamicObject);</pre>
<p>The trait object has been obtained from the pointer (<kbd>&amp;DynamicObject</kbd>) which implemented the trait by using the cast (<kbd>&amp;test_one as &amp;DynamicObject</kbd>). It is also acceptable to use <kbd>display_code(&amp;test_one)</kbd>. This is known as coercion: <kbd>&amp;test_one</kbd> has been used as an argument to a function that takes <kbd>&amp;DynamicObject</kbd>.</p>
<p>The only issue with dynamic dispatch is that it can be slower, as each time the code is run, the runtime <em>forgets</em>Â the type of the pointer and has to create a new implementation for the different type.</p>


            </article>

            
        </section>
    </div></body>
</html>