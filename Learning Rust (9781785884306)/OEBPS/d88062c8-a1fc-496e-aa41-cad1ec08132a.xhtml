<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">std:ffi</h1>
                </header>
            
            <article>
                
<p>FFI is Rust's method of interacting with non-Rust libraries. This trait provides a number of utilities for this purpose.</p>
<p><strong>Structs, Traits, and Enums</strong><span>: </span><span>Structs </span><kbd>CStr</kbd><span>, </span><kbd>CString</kbd><span> (representation of a borrowed C string and an owned C-compatible string respectively), </span><kbd>FromBytesWithNullError</kbd><span> (error returned from </span><kbd>CStr::from_bytes_with_nul</kbd><span>), </span><kbd>IntoStringError</kbd><span> (error returned from </span><kbd>CString::into_string</kbd><span> to indicate a UTF8 error during a conversion), </span><kbd>NulError</kbd><span> (returns an error from </span><kbd>CString::new</kbd><span> indicating a null byte was found in the provided vector), </span><kbd>OsStr</kbd><span>, and </span><kbd>OsString</kbd><span> (slices into OS strings).</span></p>


            </article>

            
        </section>
    </div></body>
</html>