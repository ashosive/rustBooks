<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">std::mem</h1>
                </header>
            
            <article>
                
<p>This module performs memory handling functions.</p>
<div class="packt_infobox"><span>This module is used to query size and alignment types, initialization, and the manipulation of memory.</span></div>
<p><strong>Structs, Traits, and Enums</strong></p>
<ul>
<li><span><strong>Functions</strong>: </span><kbd>align_of</kbd><span> (returns alignment in memory of type), </span><kbd>align_of_val</kbd><span> (minimum alignment of type of value </span><kbd>val</kbd><span> points to), </span><kbd>drop</kbd><span> (disposes), </span><kbd>forget</kbd><span> (leaves a value to void, takes ownership but doesn't run the destructor), </span><kbd>replace</kbd><span> (replaces the value at a </span><kbd>mut</kbd><span> location with a new one, returns the old value but doesn't de-initialize or copy either one), </span><kbd>size_of</kbd><span> (returns size of type in bytes), </span><kbd>size_of_val</kbd><span> (returns the size of a value in bytes), </span><kbd>swap</kbd><span> (swaps the values of two mut locations; must be of the same type), </span><kbd>transmute</kbd><span> (unsafely transforms a value of one type into another), </span><kbd>transmute_copy</kbd><span> (interprets <kbd>src</kbd> as </span><kbd>&amp;T</kbd><span>, then reads <kbd>src</kbd> without moving the contained value), </span><kbd>uninitialized</kbd><span> (bypasses Rust's memory initialization requirement), and </span><kbd>zeroed</kbd><span> (creates a value initialized to zero).</span></li>
</ul>


            </article>

            
        </section>
    </div></body>
</html>