<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section class="pagenumrestart" data-type="chapter" epub:type="chapter" data-pdf-bookmark="Chapter 1. Why Rust?"><div class="chapter" id="why-rust">
<h1><span class="label">Chapter 1. </span>Why Rust?</h1>

<aside data-type="sidebar" epub:type="sidebar"><div class="sidebar" id="idm45625529500056"><h5>A note for Early Release readers</h5>
<p>With Early Release ebooks, you get books in their earliest form—the author’s raw and unedited content as they write—so you can take advantage of these technologies long before the official release of these titles.</p>

<p>This will be the 1st chapter of the final book.</p>

<p>If you have comments about how we might improve the content and/or examples in this book, or if you notice missing material within this chapter, please reach out to the author at <em>jimb@red-bean.com</em>.</p>
</div></aside>

<blockquote data-type="epigraph" epub:type="epigraph">
<p>In certain contexts—for example the context Rust is targeting—being 10x or even 2x faster than the competition is a make-or-break thing. It decides the fate of a system in the market, as much as it would in the hardware market.</p>

<p data-type="attribution"><a href="http://graydon.livejournal.com/236436.html">Graydon Hoare</a></p>
</blockquote>

<blockquote data-type="epigraph" epub:type="epigraph">
<p>All computers are now parallel...<br/>
Parallel programming <strong>is</strong> programming.</p>

<p data-type="attribution">Michael McCool et al., <em>Structured Parallel Programming</em></p>
</blockquote>

<blockquote data-type="epigraph" epub:type="epigraph">
<p>TrueType parser flaw<br/>
used by nation-state attacker for surveillance;<br/>
all software is security-sensitive.</p>

<p data-type="attribution"><a href="https://twitter.com/andywingo/status/610765099498872832">Andy Wingo</a></p>
</blockquote>

<p><a contenteditable="false" data-primary="Rust (generally)" data-secondary="reasons for using" data-type="indexterm" id="C01-why-rust.html0"/> <a contenteditable="false" data-primary="systems programming" data-type="indexterm" id="idm45625529456232"/> Systems programming languages have come a long way in the 50 years since we started using high-level languages to write operating systems, but two problems in particular have proven difficult to crack:</p>

<ul>
	<li>
	<p>It’s difficult to write secure code. It’s especially difficult to manage memory correctly in C and C++. Users have been suffering with the consequences for decades, in the form of security holes dating back at least as far as the 1988 Morris worm.<a contenteditable="false" data-primary="Morris worm" data-type="indexterm" id="idm45625529452808"/></p>
	</li>
	<li>
	<p><a contenteditable="false" data-primary="multithreaded programming" data-seealso="concurrency, concurrent programming" data-type="indexterm" id="idm45625529626968"/> It’s very difficult to write multithreaded code, which is the only way to exploit the abilities of modern machines. Even experienced programmers approach threaded code with caution: concurrency can introduce broad new classes of bugs and make ordinary bugs much harder to reproduce.</p>
	</li>
</ul>

<p>Enter Rust: a safe, concurrent language with the performance of C and C++.</p>

<p>Rust is a new systems programming language developed by Mozilla and a community of contributors. Like C and C++, Rust gives developers fine control over the use of memory, and maintains a close relationship between the primitive operations of the language and those of the machines it runs on, helping developers anticipate their code’s costs. <a contenteditable="false" data-primary="Stroustrup, Bjarne" data-type="indexterm" id="idm45625529623672"/> Rust shares the ambitions Bjarne Stroustrup articulates for C‍++ in his paper “Abstraction and the C++ Machine Model:”</p>

<blockquote>
<p><a contenteditable="false" data-primary="zero-overhead principle" data-type="indexterm" id="idm45625529621688"/> In general, C++ implementations obey the zero-overhead principle: What you don’t use, you don’t pay for. And further: What you do use, you couldn’t hand code any <span class="keep-together">better.</span></p>
</blockquote>

<p>To these Rust adds its own goals of memory safety and trustworthy concurrency.</p>

<p>The key to meeting all these promises is Rust’s novel system of <em>ownership</em>, <em>moves</em>, and <em>borrows</em>, checked at compile time and carefully designed to complement Rust’s flexible static type system. <a contenteditable="false" data-primary="ownership" data-secondary="defined" data-type="indexterm" id="idm45625529495240"/> The ownership system establishes a clear lifetime for each value, making garbage collection unnecessary in the core language, and enabling sound but flexible interfaces for managing other sorts of resources like sockets and file handles. <a contenteditable="false" data-primary="moves" data-secondary="defined" data-type="indexterm" id="idm45625529493480"/> Moves transfer values from one owner to another, and <a contenteditable="false" data-primary="borrowing" data-secondary="defined" data-type="indexterm" id="idm45625529491976"/> borrowing lets code use a value temporarily without affecting its ownership. Since many programmers will have never encountered these features in this form before, we explain them in detail in Chapters <a data-type="xref" data-xrefstyle="select:labelnumber" href="ch03.xhtml#ownership">3</a> and <a data-type="xref" data-xrefstyle="select:labelnumber" href="ch04.xhtml#references">4</a>.</p>

<p><a contenteditable="false" data-primary="concurrency/concurrent programming" data-type="indexterm" id="idm45625529818392"/> These same ownership rules also form the foundation of Rust’s trustworthy concurrency model. Most languages leave the relationship between a mutex and the data it’s meant to protect to the comments; Rust can actually check at compile time that your code locks the mutex while it accesses the data. <a contenteditable="false" data-primary="data races" data-secondary="Rust's ability to prevent" data-type="indexterm" id="idm45625529816824"/> Most languages admonish you to be sure not to use a data structure yourself after you’ve given it to another thread; Rust checks that you don’t. Rust is able to prevent data races at compile time.</p>

<p>Rust is not really an object-oriented language, although it has some object-oriented characteristics. Rust is not a functional language, although it does tend to make the influences on a computation’s result more explicit, as functional languages do. Rust resembles C and C++ to an extent, but many idioms from those languages don’t apply, so typical Rust code does not deeply resemble C or C++ code. It’s probably best to reserve judgement about what sort of language Rust is, and see what you think once you’ve become comfortable with the language.</p>

<p><a contenteditable="false" data-primary="Mozilla" data-type="indexterm" id="idm45625529813800"/><a contenteditable="false" data-primary="Servo" data-type="indexterm" id="idm45625529812696"/> To get feedback on the design in a real-world setting, Mozilla has developed Servo, a new web browser engine, in Rust. Servo’s needs and Rust’s goals are well matched: a browser must perform well and handle untrusted data securely. Servo uses Rust’s safe concurrency to put the full machine to work on tasks that would be impractical to parallelize in C or C++. In fact, Servo and Rust have grown up together, with Servo using the latest new language features, and Rust evolving based on feedback from Servo’s developers.</p>

<section data-type="sect1" data-pdf-bookmark="Type Safety"><div class="sect1" id="type-safety">
<h1>Type Safety</h1>

<p><a contenteditable="false" data-primary="Rust (generally)" data-secondary="type safety" data-type="indexterm" id="C01-why-rust.html1"/> <a contenteditable="false" data-primary="type safety" data-type="indexterm" id="C01-why-rust.html2"/> Rust is a type-safe language. But what do we mean by “type safety”? Safety sounds good, but what exactly are we being kept safe from?</p>

<p><a contenteditable="false" data-primary="undefined behavior" data-type="indexterm" id="idm45625529528920"/> Here’s the definition of <em>undefined behavior</em> from the 1999 standard for the C programming language, known as <em>C99</em>:</p>

<ul class="simplelist">
	<li>
	<p><strong>undefined behavior</strong></p>
	</li>
	<li>
	<p>behavior, upon use of a nonportable or erroneous program construct or of erroneous data, for which this International Standard imposes no requirements</p>
	</li>
</ul>

<p>Consider the following C program:</p>

<pre class="cpp" data-code-language="cpp" data-type="programlisting">
<code class="kt">int</code> <code class="nf">main</code><code class="p">(</code><code class="kt">int</code> <code class="n">argc</code><code class="p">,</code> <code class="kt">char</code> <code class="o">**</code><code class="n">argv</code><code class="p">)</code> <code class="p">{</code>
  <code class="kt">unsigned</code> <code class="kt">long</code> <code class="n">a</code><code class="p">[</code><code class="mi">1</code><code class="p">];</code>
  <code class="n">a</code><code class="p">[</code><code class="mi">3</code><code class="p">]</code> <code class="o">=</code> <code class="mh">0x7ffff7b36cebUL</code><code class="p">;</code>
  <code class="k">return</code> <code class="mi">0</code><code class="p">;</code>
<code class="p">}</code></pre>

<p>According to C99, because this program accesses an element off the end of the array <code>a</code>, its behavior is undefined, meaning that it can do anything whatsoever. When we ran this program on Jim’s laptop, it produced the following output:</p>

<pre class="console" data-code-language="console" data-type="programlisting">
<code class="go">undef: Error: .netrc file is readable by others.</code>
<code class="go">undef: Remove password or make file unreadable by others.</code></pre>

<p>Then it crashed. Jim’s laptop doesn’t even have a <em>.netrc</em> file. If you try it yourself, it will probably do something entirely different.</p>

<p>The machine code the C compiler generated for this <code>main</code> function happens to place the array <code>a</code> on the stack three words before the return address, so storing <code>0x7ffff7b36cebUL</code> in <code>a[3]</code> changes poor <code>main</code>’s return address to point into the midst of code in the C standard library that consults one’s <em>.netrc</em> file for a password. When <code>main</code> returns, execution resumes not in <code>main</code>’s caller, but at the machine code for these lines from the library:</p>

<pre class="cpp" data-code-language="cpp" data-type="programlisting">
<code class="n">warnx</code><code class="p">(</code><code class="n">_</code><code class="p">(</code><code class="s">"Error: .netrc file is readable by others."</code><code class="p">));</code>
<code class="n">warnx</code><code class="p">(</code><code class="n">_</code><code class="p">(</code><code class="s">"Remove password or make file unreadable by others."</code><code class="p">));</code>
            <code class="k">goto</code> <code class="n">bad</code><code class="p">;</code></pre>

<p>In allowing an array reference to affect the behavior of a subsequent <code>return</code> statement, the C compiler is fully standards-compliant. An undefined operation doesn’t just produce an unspecified result: it is allowed to cause the program to do <em>anything at all</em>.</p>

<p>The C99 standard grants the compiler this carte blanche to allow it to generate faster code. Rather than making the compiler responsible for detecting and handling odd behavior like running off the end of an array, the standard makes the programmer responsible for ensuring those conditions never arise in the first place.</p>

<p>Empirically speaking, we’re not very good at that. <a contenteditable="false" data-primary="Li, Peng" data-type="indexterm" id="idm45625525660456"/> While a student at the University of Utah, researcher Peng Li modified C and C++ compilers to make the programs they translated report when they executed certain forms of undefined behavior. He found that nearly all programs do, including those from well-respected projects that hold their code to high standards. And undefined behavior often leads to exploitable security holes in practice. <a contenteditable="false" data-primary="Morris worm" data-type="indexterm" id="idm45625524680456"/> The Morris worm propagated itself from one machine to another using an elaboration of the technique shown before, and this kind of exploit remains in widespread use today.</p>

<p>In light of that example, let’s define some terms. <a contenteditable="false" data-primary="well-defined program" data-type="indexterm" id="idm45625526838600"/> If a program has been written so that no possible execution can exhibit undefined behavior, we say that program is <em>well defined</em>. <a contenteditable="false" data-primary="safety" data-secondary="type safe language" data-type="indexterm" id="idm45625525648456"/> <a contenteditable="false" data-primary="type-safe language" data-type="indexterm" id="idm45625525647048"/> If a language’s safety checks ensure that every program is well defined, we say that language is <em>type safe</em>.</p>

<p><a contenteditable="false" data-primary="C" data-secondary="lack of type safety" data-type="indexterm" id="idm45625529519128"/><a contenteditable="false" data-primary="C++" data-secondary="lack of type safety" data-type="indexterm" id="idm45625524839576"/> A carefully written C or C++ program might be well defined, but C and C++ are not type safe: the program shown earlier has no type errors, yet exhibits undefined behavior. <a contenteditable="false" data-primary="Python" data-type="indexterm" id="idm45625524837880"/> By contrast, Python is type safe. Python is willing to spend processor time to detect and handle out-of-range array indices in a friendlier fashion than C:</p>

<pre class="pycon" data-code-language="pycon" data-type="programlisting">
<code class="gp">&gt;&gt;&gt; </code><code class="n">a</code> <code class="o">=</code> <code class="p">[</code><code class="mi">0</code><code class="p">]</code>
<code class="gp">&gt;&gt;&gt; </code><code class="n">a</code><code class="p">[</code><code class="mi">3</code><code class="p">]</code> <code class="o">=</code> <code class="mh">0x7ffff7b36ceb</code>
<code class="gt">Traceback (most recent call last):</code>
  File <code class="nb">"&lt;stdin&gt;"</code>, line <code class="m">1</code>, in <code class="n">&lt;module&gt;</code>
<code class="gr">IndexError</code>: <code class="n">list assignment index out of range</code>
<code class="go">&gt;&gt;&gt;</code></pre>

<p>Python raised an exception, which is not undefined behavior: the Python documentation specifies that the assignment to <code>a[3]</code> should raise an <code>IndexError</code> exception, as we saw. Certainly, a module like <code>ctypes</code> that provides unconstrained access to the machine can introduce undefined behavior into Python, but the core language itself is type safe. Java, JavaScript, Ruby, and Haskell are similar in this way.</p>

<p>Note that being type safe is independent of whether a language checks types at compile time or at run time: C checks at compile time, and is not type safe; Python checks at run time, and is type safe.</p>

<p>It is ironic that the dominant systems programming languages, C and C++, are not type safe, while most other popular languages are. Given that C and C++ are meant to be used to implement the foundations of a system, entrusted with implementing security boundaries and placed in contact with untrusted data, type safety would seem like an especially valuable quality for them to have.</p>

<p>This is the decades-old tension Rust aims to resolve: it is both type safe and a systems programming language. Rust is designed for implementing those fundamental system layers that require performance and fine-grained control over resources, yet still guarantees the basic level of predictability that type safety provides. We’ll look at how Rust manages this unification in more detail in later parts of this book.</p>

<p><a contenteditable="false" data-primary="multithreaded programming" data-secondary="type safety and" data-type="indexterm" id="idm45625525519400"/> <a contenteditable="false" data-primary="concurrency/concurrent programming" data-secondary="Rust's type safety and" data-type="indexterm" id="idm45625525518040"/> Rust’s particular form of type safety has surprising consequences for multithreaded programming. Concurrency is notoriously difficult to use correctly in C and C++; developers usually turn to concurrency only when single-threaded code has proven unable to achieve the performance they need. <a contenteditable="false" data-primary="data races" data-secondary="Rust's ability to prevent" data-type="indexterm" id="idm45625525516232"/> But Rust guarantees that concurrent code is free of data races, catching any misuse of mutexes or other synchronization primitives at compile time. In Rust, you can use concurrency without worrying that you’ve made your code impossible for any but the most accomplished programmers to work on.</p>

<p><a contenteditable="false" data-primary="raw pointers" data-secondary="and unsafe code" data-type="indexterm" id="idm45625525514152"/> <a contenteditable="false" data-primary="safety rules, unsafe code as escape from" data-type="indexterm" id="idm45625525634376"/> <a contenteditable="false" data-primary="unsafe code" data-type="indexterm" id="idm45625525633080"/> Rust has an escape valve from the safety rules, for when you absolutely have to use a raw pointer. This is called <em>unsafe code</em>, and while most Rust programs don’t need it, we’ll show how to use it and how it fits into Rust’s overall safety scheme in XREF HERE.</p>

<p>Like those of other statically typed languages, Rust’s types can do much more than simply prevent undefined behavior. An accomplished Rust programmer uses types to ensure values are used not just safely but meaningfully, in a way that’s consistent with the application’s intent. In particular, Rust’s traits and generics, described in <a data-type="xref" href="ch10.xhtml#traits-and-generics">Chapter 10</a>, provide a succinct, flexible, and performant way to describe characteristics that a group of types has in common, and then take advantage of those commonalities. <a contenteditable="false" data-primary="" data-startref="C01-why-rust.html2" data-type="indexterm" id="idm45625525502280"/> <a contenteditable="false" data-primary="" data-startref="C01-why-rust.html1" data-type="indexterm" id="idm45625525500776"/> <a contenteditable="false" data-primary="" data-startref="C01-why-rust.html0" data-type="indexterm" id="idm45625525499240"/></p>

<p>Our aim in this book is to give you the insights you need not just to write programs in Rust, but to put the language to work ensuring that those programs are both safe and correct, and to anticipate how they will perform. In our experience, Rust is a major step forward in systems programming, and we want to help you take advantage of it. <a contenteditable="false" data-primary="assignment" data-secondary="moves and" data-see="moves" data-type="indexterm" id="idm45625525496520"/> <a contenteditable="false" data-primary="C" data-secondary="calling from Rust" data-see="foreign functions" data-type="indexterm" id="idm45625525494744"/> <a contenteditable="false" data-primary="C++" data-secondary="calling from Rust" data-see="foreign functions" data-type="indexterm" id="idm45625525492936"/> <a contenteditable="false" data-primary="code, unsafe" data-see="unsafe code" data-type="indexterm" id="idm45625525491128"/> <a contenteditable="false" data-primary="libraries" data-secondary="third-party" data-see="crates" data-type="indexterm" id="idm45625525489592"/> <a contenteditable="false" data-primary="lock" data-see="mutex" data-type="indexterm" id="idm45625525487784"/> <a contenteditable="false" data-primary="namespaces" data-see="modules" data-type="indexterm" id="idm45625525486248"/> <a contenteditable="false" data-primary="pointer types" data-secondary="non-owning" data-see="references" data-type="indexterm" id="idm45625525484712"/> <a contenteditable="false" data-primary="pointer types" data-secondary="references" data-see="references" data-type="indexterm" id="idm45625525482904"/> <a contenteditable="false" data-primary="traits" data-secondary="utility" data-see="utility traits" data-type="indexterm" id="idm45625525481096"/> <a contenteditable="false" data-primary="unsafe code" data-secondary="foreign functions" data-see="foreign functions" data-type="indexterm" id="idm45625525479288"/> <a contenteditable="false" data-primary="variables" data-secondary="ownership" data-see="ownership" data-type="indexterm" id="idm45625525477480"/></p>
</div></section>
</div></section></div></body>
</html>