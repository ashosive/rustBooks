<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Result and Option</h1>
                </header>
            
            <article>
                
<p>Here we look at two kinds of <kbd>enum</kbd> that are used everywhere in Rust code. A <kbd>Result</kbd> is a special kind of <kbd>enum</kbd> that is defined in the standard library. It is used whenever something is executed, that can either end:</p>
<ul>
<li>Successfully, then a value <kbd>Ok</kbd> (of a certain type <kbd>T</kbd>) is returned</li>
<li>With an error, then an <kbd>Err</kbd> value (of type <kbd>E</kbd>) is returned</li>
</ul>
<p>Because this situation is so common, provision is made that the value <kbd>T</kbd> and error <kbd>E</kbd> types can be as general, or generic, as possible. The <kbd>Result</kbd> <kbd>enum</kbd> is defined as:</p>
<pre>enum Result&lt;T, E&gt; { 
    Ok(T), 
    Err(E) 
} </pre>
<p>An <kbd>Option</kbd> is another <kbd>enum</kbd> that is defined in the standard library. It is used whenever there is a value, but there can also be a possibility that there is no value. For example, suppose our program expects to read in a value from the console. However, when it runs as a background program by accident, it will never get an input value.</p>
<p>Rust wants to be on the safe side whenever possible, so in this case it is better to read in the value as an <kbd>Option</kbd> <kbd>enum</kbd>, with two possibilities:</p>
<ul>
<li><kbd>Some</kbd>: If there is a value of type <kbd>T</kbd></li>
<li><kbd>None</kbd>: If there is no value</li>
</ul>
<p>The value <kbd>Option</kbd> again is defined as a generic type:</p>
<pre>enum Option&lt;T&gt; { 
    Some(T), 
    None 
} </pre>


            </article>

            
        </section>
    </div></body>
</html>