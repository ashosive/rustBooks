<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Tuples</h1>
                </header>
            
            <article>
                
<p>If you want to combine a certain number of values of different types, then you can collect them in a tuple, enclosed between parentheses (<kbd>( )</kbd>) and separated by commas, like this:</p>
<pre>// from Chapter 4/code/tuples.rs 
let thor = ("Thor", true, 3500u32); 
println!("{:?}", thor); // ("Thor", true, 3500) </pre>
<p>The type of <kbd>thor</kbd> is <kbd>(&amp;str, bool, u32)</kbd>, that is, the tuple of the item's types.</p>
<p>To extract an item on index use a dot syntax:</p>
<pre>println!("{} - {} - {}", thor.0, thor.1, thor.2); </pre>
<p>Another way to extract items to other variables is by destructuring the tuple:</p>
<pre>let (name, _, power) = thor; 
println!("{} has {} power points ", name, power); </pre>
<p>This prints out the following output:</p>
<pre>    <strong>Thor has 3500 power points</strong>  </pre>
<p>Here the <kbd>let</kbd> statement matches the pattern on the left with the right-hand side. The <kbd>_</kbd> indicates that we are not interested in the second item of <kbd>thor</kbd>.</p>
<p>Tuples can only be assigned to one another or compared with each other if they are of the same type. A one-element tuple needs to be written like this:</p>
<pre>let one = (1,); </pre>
<p>A function that needs to return some values of different types can collect them in a tuple and return that tuple, like this:</p>
<pre>fn increase_power(name: &amp;str, power: u32) <br/>-&gt; (&amp;str, u32) { 
if power &gt; 1000 { 
 return (name, power * 3); 
} else { 
 return (name, power * 2); 
 } 
} </pre>
<p>This function header could also be written as:</p>
<pre>fn increase_power2((name, power): (&amp;str, u32)) -&gt; (&amp;str, u32) </pre>
<p>If we call this with the following statement:</p>
<pre>let (god, strength) = increase_power(thor.0, thor.2); 
println!("This god {} has now strength {} ", god, strength); </pre>
<p>The output looks like the following:</p>
<pre>    <strong>This god Thor has now strength 10500</strong>  </pre>
<p>A tuple is also very handy when swapping two variables:</p>
<pre>let mut n = 0; 
let mut m = 1; 
let (n, m) = (m, n); 
println!("n: {} m: {}", n, m);</pre>
<div class="packt_tip packt_infobox"><span class="packt_screen">Exercise</span>:<br/>
(see code in <kbd>Chapter 4/exercises/tuples_ex.rs</kbd>)<br/>
Try to compare the tuples <kbd>(2, 'a')</kbd> and <kbd>(5, false</kbd>), explain the error message.<br/>
Try to change an item in a tuple (hint: you must add a keyword for it to work).<br/>
Make an empty tuple.<br/>
Haven't we encountered this before? So the unit value is in fact an empty tuple!</div>


            </article>

            
        </section>
    </div></body>
</html>