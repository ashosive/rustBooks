<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">The tests module</h1>
                </header>
            
            <article>
                
<p>In a more realistic, larger project, tests are separated from the application code:</p>
<ul>
<li>Unit tests are collected in a module <kbd>test</kbd></li>
<li>Integration tests are collected in a <kbd>lib.rs</kbd> file in a <kbd>tests</kbd> directory</li>
</ul>
<p>The code generated by Cargo for a library groups the tests inside a <kbd>mod tests</kbd>, a so-called module (see <a href="d271499e-5fd5-48a4-8395-e5efedc8a482.xhtml"><span class="ChapterrefPACKT">Chapter 8</span></a>, <em>Organizing Code and Macros;</em> if you prefer, you can come back to this section after having read <a href="d271499e-5fd5-48a4-8395-e5efedc8a482.xhtml"><span class="ChapterrefPACKT">Chapter 8</span></a>, <em>Organizing Code and Macros</em> and have a better understanding of modules).</p>
<p>In order to work with functions defined in the main code, we have to add the command <kbd>use super::*;</kbd>, which brings all these functions into the scope of the tests module:</p>
<pre>pub fn double(n: i32) -&gt; i32 { 
    n * 2 
} 
 
#[cfg(test)] 
mod tests { 
    use super::*; 
 
    #[test] 
    fn it_works() { 
        assert_eq!(double(42), 84); 
    } 
} </pre>
<p>The module <kbd>tests</kbd> is typically used to contain unit tests of your library's functions.</p>
<p>Let's make another example with integration tests using our function <kbd>cube</kbd> from <a href="59b7261a-67fa-4a7e-9928-27ae01a25ceb.xhtml"><span class="ChapterrefPACKT">Chapter 3</span></a><span class="NormalPACKTChar">,</span> <em>Using Functions and Control Structures</em>, and start a project with <kbd>cargo new cube</kbd>. We replace the code in <kbd>src\lib.rs</kbd> with:</p>
<pre>// from Chapter 3/code/cube/src/lib.rs: 
 
pub fn cube(val: u32) -&gt; u32 { 
    val * val * val 
  } 
 
#[cfg(test)] 
mod tests; </pre>
<p>In the second line, we declare our <kbd>tests</kbd> module, preceded by the test configuration attribute. Now the code of this module goes into a file <kbd>tests.rs</kbd> in the same folder, that way they are more cleanly separated from our library code:</p>
<pre>// from Chapter 3/code/cube/src/tests.rs: 
use super::*; 
 
#[test] 
fn cube_of_2_is_8() { 
    assert_eq!(cube(2), 8); 
} 
 
// other test functions: 
//... </pre>
<p>Integration tests go into a file <kbd>lib.rs</kbd> in a <kbd>tests</kbd> folder, which we create manually:</p>
<pre>// from Chapter 3/code/cube/tests/lib.rs: 
extern crate cube; 
use cube::cube; 
 
#[test] 
fn cube_of_4_is_64() { 
    assert_eq!(cube(4), 64); 
} 
 
// other test functions: 
// ... </pre>
<p>Here, we need to import the <kbd>cube</kbd> crate with an <kbd>extern</kbd> command, and qualify the function name <kbd>cube</kbd> with its module name <kbd>cube</kbd> (or else do a <kbd>use cube::cube;</kbd>).</p>
<p>As before, the test code will only be compiled and run when we give <span>the</span> <kbd>cargo test</kbd> <span>command,</span> which gives the following results:</p>
<div class="packt_figure CDPAlignCenter CDPAlign"><img height="243" width="442" src="Images/38bd73fc-f1bf-4970-a41d-c213b1e6128f.png"/></div>
<p>We see that our two tests (the unit test and the integration test) passed. The output shows at the end that tests in the documentation are also executed if they are present.</p>
<p>If you want to be able to use a more Speclike framework, with keywords like <strong>describe</strong> and <strong>it</strong>, you should definitely take a look at the stainless crate (<a href="https://github.com/reem/stainless"><span class="URLPACKT">https://github.com/reem/stainless</span></a>).</p>


            </article>

            
        </section>
    </div></body>
</html>