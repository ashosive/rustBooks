<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Scope of a variable and shadowing</h1>
                </header>
            
            <article>
                
<p>All variables defined in the program <kbd>bindings.rs</kbd> have local scope delimited by the <kbd>{ }</kbd> of the function which happens to be the <kbd>main()</kbd> function here, but this applies to any function. After the ending, <kbd>},</kbd> they go out of scope and their memory allocation is freed.</p>
<p>We can even make a more limited scope inside a function by defining a code block as all code contained within a pair of curly braces <kbd>{ }</kbd>, as in the following snippet:</p>
<pre>// see Chapter 2/code/scope.rs 
fn main() { 
  let outer = 42; 
   { // start of code block 
        let inner = 3.14; 
        println!("block variable: {}", inner); 
        let outer = 99; // shadows the first outer variable 
        println!("block variable outer: {}", outer); 
    } // end of code block 
    println!("outer variable: {}", outer); 
} </pre>
<p>The preceding code gives the following output:</p>
<pre>    <strong>block variable: 3.14</strong>
    <strong>block variable outer: 99</strong>
    <strong>outer variable: 42</strong></pre>
<p>A variable defined in the block (like <kbd>inner</kbd>) is only known inside that block. A variable in the block can also have the same name as a variable in an enclosing scope (like <kbd>outer</kbd>), which is replaced (shadowed) by the block variable until the block ends. What do you expect when you try to print out <kbd>inner</kbd> after the block? Try it out.</p>
<p>Why would you want to use a code block? In the section <em>Expressions</em>, we will see that a code block can return a value that can be bound to a variable with the <kbd>let</kbd> binding. A code block can also be empty as <kbd>{ }</kbd>.</p>


            </article>

            
        </section>
    </div></body>
</html>