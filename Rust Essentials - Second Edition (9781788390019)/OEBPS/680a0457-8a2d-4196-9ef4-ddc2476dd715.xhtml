<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Higher Order Functions and Error-Handling</h1>
                </header>
            
            <article>
                
<p>Now that we have the data structures and control constructs in place, we can start discovering the functional features of Rust, which make it a really expressive language.</p>
<p>We will cover the following topics:</p>
<ul>
<li>Higher order functions and closures</li>
<li>Iterators</li>
<li>Consumers and adapters</li>
<li>Generic data structures and functions</li>
<li>Error-handling</li>
<li>Some more examples of error-handling</li>
</ul>


            </article>

            
        </section>
    </div></body>
</html>