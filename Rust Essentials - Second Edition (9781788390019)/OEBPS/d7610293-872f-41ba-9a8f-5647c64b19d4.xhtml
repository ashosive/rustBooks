<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Thread safety</h1>
                </header>
            
            <article>
                
<p>Traditional programming with threads is very difficult to get right if you allow the different threads to work on the same mutable data, or so-called <strong>shared memory</strong>. When two or more threads simultaneously change data, then data corruption (also called <strong>data racing</strong>) can occur due to the unpredictability of the thread's scheduling.</p>
<p>In general, data (or a type) is said to be <strong>thread-safe</strong> when its contents will not be corrupted by the execution of different threads. Other languages offer no such help, but the Rust compiler simply forbids non-thread-safe situations to occur. The same ownership strategy that we looked at to allow Rust to prevent memory safety errors also enables you to write safe, concurrent programs.</p>
<p>Consider the following program:</p>
<pre>// code from Chapter 9/code/not_shared.rs:    
use std::thread; 
use std::time; 
 
fn main() { 
    let mut health = 12; 
    for i in 2..5 { 
        thread::spawn(move || { 
            health *= i; 
        }); 
    } 
 thread::sleep(time::Duration::from_secs(2)); 
    println!("{}", health); // 12 
} </pre>
<p>Our initial health is 12, but there are three fairies that can double, triple, and quadruple our health. We let each of them do that in a different thread, and after the threads are finished we expect a <kbd>health</kbd> of 288 (<em>= 12 * 2 * 3 * 4</em>). But after their magic actions, our <kbd>health</kbd> is still <kbd>12</kbd>, even if we wait long enough to be sure that the threads are finished. Clearly, the three threads worked on a copy of our variable, not on the variable itself. Rust does not allow the <kbd>health</kbd> variable to be shared among the threads to prevent data corruption. In the next section, we will explore how we can use mutable variables that are shared between threads.</p>


            </article>

            
        </section>
    </div></body>
</html>