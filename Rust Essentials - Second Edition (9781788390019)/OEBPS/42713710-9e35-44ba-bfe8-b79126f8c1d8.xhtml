<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Match, struct, and ref</h1>
                </header>
            
            <article>
                
<p>If you want to get a reference to a matched variable inside a <kbd>match</kbd>, use the <kbd>ref</kbd> keyword, as in the following example:</p>
<pre>// see code in Chapter 7/code/ref.rs    
fn main() { 
   let n = 42; 
   match n { 
      ref r =&gt; println!("Got a reference to {}", r), 
   } 
 
   let mut m = 42; 
   match m { 
      ref mut mr =&gt; { 
         println!("Got a mutable reference to {}", mr); 
         *mr = 43; 
      }, 
   } 
   println!("m has changed to {}!", m); 
} </pre>
<p>This prints out the following output:</p>
<pre>    <strong>Got a reference to 42</strong>
    <strong>Got a mutable reference to 42</strong>
    <strong>m has changed to 43!</strong>  </pre>
<p>The <kbd>r</kbd> variable inside the <kbd>match</kbd> has the type <kbd>&amp;i32</kbd>. In other words, the <kbd>ref</kbd> keyword creates a reference for use in the pattern. If you need a mutable reference, use <kbd>ref mut</kbd>.</p>
<p>We can also use <kbd>ref</kbd> to get a reference to a field of a struct or tuple in a destructuring via a <kbd>let</kbd> binding. For example, while reusing the struct <kbd>Magician</kbd> we can extract the name of <kbd>mag</kbd> by using <kbd>ref</kbd> and then return it from the <kbd>match</kbd>:</p>
<pre>let mag = Magician { name: "Gandalf", power: 4625}; 
let name = { 
    let Magician { name: ref ref_to_name, power: _ } = mag; 
    *ref_to_name 
}; 
println!("The magician's name is {}", name); </pre>
<p>This prints out the following output:</p>
<pre>    <strong>The magician's name is Gandalf.</strong>  </pre>
<p>References are the most common pointer type and have the most possibilities; other pointer types should only be applied in very specific use-cases.</p>


            </article>

            
        </section>
    </div></body>
</html>