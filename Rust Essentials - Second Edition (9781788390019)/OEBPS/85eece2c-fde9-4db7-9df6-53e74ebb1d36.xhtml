<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Arrays, vectors, and slices</h1>
                </header>
            
            <article>
                
<p>Suppose we have a bunch of alien creatures to populate a game level, then we probably want to store their names in a handy list. Rust's array is just what we need:</p>
<pre>// from Chapter 4/code/arrays.rs 
let aliens = ["Cherfer", "Fynock", "Shirack", "Zuxu"]; 
println!("{:?}", aliens); </pre>
<p>To make an array, separate the different items by commas and surround the whole with <kbd>[ ]</kbd> (rectangular brackets). All items must be of the same type. Such an array is of fixed size (it must be known at compile time) and cannot be changed; it is stored in one contiguous piece of memory in stack memory.</p>
<p>If the items have to be modifiable, declare your array with <kbd>let mut</kbd>; however even then the number of items cannot change:</p>
<pre>let mut aliens = ["Cherfer", "Fynock", "Shirack", "Zuxu"]; </pre>
<p>The array <kbd>aliens</kbd> could be type annotated as <kbd>[&amp;str; 4]</kbd>, where the first parameter is the type of the items, and the second is their number.</p>
<pre>let aliens: [&amp;str; 4] = ["Cherfer", "Fynock", "Shirack", "Zuxu"]; </pre>
<p>If we want to initialize an array with three <kbd>Zuxus</kbd>, that's easy too:</p>
<pre>let zuxus = ["Zuxu"; 3]; </pre>
<p>How would you make an empty array? Like this:</p>
<pre>let mut empty: [i32; 0] = []; 
println!("{:?}", empty); // [] </pre>
<p>We can access individual items with their index, starting from <kbd>0</kbd>:</p>
<pre>println!("The first item is: {}", aliens[0]); // Cherfer 
println!("The third item is: {}", aliens[2]); // Shirack </pre>
<p>The number of items in the array is given by <kbd>aliens.len()</kbd>, so how would you get the last item?</p>
<p>Using the following statement:</p>
<pre>aliens[aliens.len() - 1] </pre>
<p>Alternatively, this can be found with the following statement:</p>
<pre>aliens.iter().last().unwrap(); </pre>
<p>What do you think will happen when we try to change an item, like this?</p>
<pre>aliens[2] = "Facehugger"; </pre>
<p>Hopefully you didn't think that Rust would allow this, did you? Unless you told it explicitly that <kbd>aliens</kbd> can change with the following statement:</p>
<pre>let mut aliens = [...]; </pre>
<p>In many cases the compiler checks whether the array index stays within the array bounds.</p>
<p>The index is also checked at runtime to be within the array bounds <kbd>0</kbd> and <kbd>aliens.len()</kbd>; if it is not, the program crashes with a runtime error or panic:</p>
<pre>println!("This item does not exist: {}", aliens[10]); </pre>
<p>This gives the following output:</p>
<pre><strong>thread '&lt;main&gt;' panicked at 'index out of bounds: the len is 4 but the index is 10'</strong>  </pre>
<p>Pointers to arrays use automatic dereferencing so that you do not need to use <kbd>*</kbd> explicitly, as demonstrated in this code snippet:</p>
<pre>let pa = &amp;aliens; 
println!("Third item via pointer: {}", pa[2]); </pre>
<p>This prints the following output:</p>
<pre><strong>Third item via pointer: Shirack</strong></pre>
<p>If we want to go through the items successively one by one, and print them out or do something useful with them, we can do it like this:</p>
<pre>for ix in 0..aliens.len() { 
    println!("Alien no {} is {}", ix, aliens[ix]); 
} </pre>
<p>This works and it gives us for each item its index, which might be useful. But we use the index to fetch each consecutive item, and each time Rust has to check whether we are still within the bounds of the array in memory. That's why it is not very efficient, and in the section <em>Iterators</em> in <a href="2535f67f-e1a7-4ef7-af15-dcebffd38149.xhtml"><span class="ChapterrefPACKT">Chapter 6</span></a>, <em>Using Traits and OOP in Rust</em>, we will see a much more efficient way by iterating over the items:</p>
<pre>for a in aliens.iter() {    
    println!("The next alien is {}", a); 
} </pre>
<p>The <kbd>for</kbd> loop can be written even shorter as:</p>
<pre>for a in &amp;aliens  { ... } </pre>


            </article>

            
        </section>
    </div></body>
</html>