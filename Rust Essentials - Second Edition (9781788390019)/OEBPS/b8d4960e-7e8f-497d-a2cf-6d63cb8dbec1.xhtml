<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Panicking threads</h1>
                </header>
            
            <article>
                
<p>What happens when one of the spawned threads gets into a panic? No problem, the threads are isolated from each other, and only the panicking thread will crash after having freed its resources; the parent thread is not affected. In fact, the parent can test the <kbd>is_err</kbd> return value from <kbd>spawn</kbd>, like this:</p>
<pre>// code from Chapter 9/code/panic_thread.rs:  
use std::thread; 
 
fn main() { 
   let result = thread::spawn(move || { 
      panic!("I have fallen into an unrecoverable trap!"); 
   }).join(); 
 
   if result.is_err() { 
      println!("This child has panicked"); 
   } 
} </pre>
<p>This prints out the following:</p>
<pre><strong>thread '&lt;unnamed&gt;' panicked at 'I have fallen into an unrecoverable trap!'</strong>
<strong>This child has panicked</strong>  </pre>
<p>To put it another way, the thread is a unit of failure isolation.</p>


            </article>

            
        </section>
    </div></body>
</html>