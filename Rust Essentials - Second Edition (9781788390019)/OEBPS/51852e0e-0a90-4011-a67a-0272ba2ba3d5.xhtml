<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Branching on a condition</h1>
                </header>
            
            <article>
                
<p>Branching on a condition is done with a common <kbd>if</kbd>, <kbd>if else</kbd>, or <kbd>if else if else</kbd> construct, as in this example:</p>
<pre>// from Chapter 3/code/ifelse.rs 
fn main() { 
  let dead = false; 
  let health = 48; 
  if dead { 
    println!("Game over!"); 
       return; 
  } 
  if dead { 
    println!("Game over!"); 
    return; 
  } else { 
    println!("You still have a chance to win!"); 
  } 
  if health &gt;= 50 { 
      println!("Continue to fight!"); 
  } else if health &gt;= 20  { 
      println!("Stop the battle and gain strength!"); 
  } else { 
      println!("Hide and try to recover!"); 
  } 
} </pre>
<p>This gives the following output:</p>
<pre>    <strong>You still have a chance to win!</strong>
    <strong>Stop the battle and gain strength!</strong></pre>
<p>The condition after the <kbd>if</kbd> statement has to be a Boolean. However, unlike in C, the condition must not be enclosed in parentheses. Code blocks surrounded by <kbd>{ }</kbd> (curly braces) are needed after the <kbd>if</kbd>, <kbd>else</kbd>, or <kbd>else if</kbd> statement. The first example also shows that we can get out of a function with the <kbd>return</kbd> value.</p>
<p>Also the <kbd>if else</kbd> condition is an expression that returns a value. This value can be used as a function call parameter in a <kbd>print!</kbd> statement, or it can be assigned in a <kbd>let</kbd> binding, like this:</p>
<pre>let active = if health &gt;= 50 { 
           true 
         }else{ 
           false 
         }; 
println!("Am I active? {}", active); </pre>
<p>This prints the following output:</p>
<pre>    <strong>Am I active? false</strong></pre>
<p>The code blocks could contain many lines, but be careful: when returning a value, you must omit the<kbd>;</kbd> (semi-colon) after the last expression in the <kbd>if</kbd> or <kbd>else</kbd> block (see section <em>Expressions</em> in <a href="4e1f4309-1ce5-4eb2-9860-99a814bdd2ea.xhtml"><span class="ChapterrefPACKT">Chapter 2</span></a>, <em>Using Variables and Types</em>). Moreover, all branches always must return a value of the same type.</p>
<p>This also alleviates the need for a ternary operator (<kbd>?<span>:</span></kbd> ), like in C++; simply use <kbd>if,</kbd> as follows:</p>
<pre>let adult = true; 
let age = if adult { "+18" } else { "-18" }; 
println!("Age is {}", age);  // </pre>
<p>This gives the following output:</p>
<pre>    <strong>Age is +18</strong></pre>
<div class="packt_infobox"><span class="packt_screen">Exercise</span>:<br/>
<ol>
<li>See code in <kbd>Chapter 3/exercises/iftest.rs</kbd>.</li>
<li>Try adding a<kbd>;</kbd> (semi-colon) after the <kbd>+18</kbd> and <kbd>-18</kbd> <span class="NormalPACKTChar">values,</span> like this <kbd>{"+18";}</kbd>, what value will be printed for the variable <kbd>age</kbd>? What happens if you type annotate the variable <kbd>age</kbd> as <kbd>&amp;str</kbd>?</li>
<li>See if you can omit the <kbd>{ }</kbd> (curly braces) if there is only one statement in the block.</li>
<li>Also, verify if this code is OK:<br/>
<kbd>let health = -3;</kbd><br/>
<kbd>let result = if health &lt;=0 { "Game over man!" };</kbd></li>
</ol>
</div>
<p>How would you correct this statement if necessary?--by using pattern matching, which we will examine in the next chapter, also branches code, but does so based on the value of a variable.</p>


            </article>

            
        </section>
    </div></body>
</html>