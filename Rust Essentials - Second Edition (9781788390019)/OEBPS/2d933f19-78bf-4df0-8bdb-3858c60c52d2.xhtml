<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">What this book covers</h1>
                </header>
            
            <article>
                
<p><a href="b77a4ac4-6a4c-42a6-aecf-63fd957f3d8a.xhtml">Chapter 1</a>, <em>Starting with Rust</em>, discusses the main reasons that led to the development of Rust. We compare Rust with other languages and indicate the areas for which it is most appropriate. Then, we guide you through installing all the necessary components for a Rust development environment. In particular, you will learn how to work with Cargo, Rust’s package manager.</p>
<p><a href="4e1f4309-1ce5-4eb2-9860-99a814bdd2ea.xhtml">Chapter 2</a>, <em>Using Variables and Types</em>, looks at the basic structure of a Rust program. We discuss the primitive types, how to declare variables and whether they have to be typed, and the scope of variables. Immutability, one of the key cornerstones of Rust’s safety strategy is also illustrated. Then, we look at basic operations, how to do formatted printing, and the important difference between expressions and statements.</p>
<p class="NormalPACKT"><a href="59b7261a-67fa-4a7e-9928-27ae01a25ceb.xhtml"><span class="ChapterrefPACKT">Chapter 3</span></a>, <em><span class="ItalicsPACKT">Using Functions and Control Structures</span></em>, shows how to define functions, and the different ways to influence program execution flow in Rust. We also take a look at attributes and how to do testing in Rust.</p>
<p class="NormalPACKT"><a href="397a1a97-368f-4af7-a7fb-f44ad8c5aab9.xhtml"><span class="ChapterrefPACKT">Chapter 4</span></a>, <span class="ItalicsPACKT"><em>Structuring Data and Matching Patterns</em>, discusses the basic data types for programming, such as strings, vectors, slices, tuples, and enums. You will learn how to get input from the console and how to work with program arguments. Then we show you the powerful pattern matching that is possible in Rust and how values are extracted by destructuring patterns.</span></p>
<p><a href="680a0457-8a2d-4196-9ef4-ddc2476dd715.xhtml">Chapter 5</a>, <em>Higher Order Functions and Error-Handling</em>, explores the functional features of Rust. We see how data structures and functions can be defined in a generic way. Furthermore, you will learn how to work with Rust’s unique error-handling mechanism.</p>
<p><a href="2535f67f-e1a7-4ef7-af15-dcebffd38149.xhtml">Chapter 6</a>, <em>Using Traits and OOP in Rust</em>, explores the object-oriented features of Rust. We see how traits can be used to define behavior and to simulate inheritance in data structures. We also explore some common OOP patterns implemented in Rust, such as the visitor and the builder pattern.</p>
<p class="NormalPACKT"><a href="181718d1-5b78-4952-8082-796f69471c96.xhtml"><span class="ChapterrefPACKT">Chapter 7</span></a>, <span class="ItalicsPACKT"><em>Ensuring Memory Safety and Pointers</em>,</span> exposes the borrow checker, Rust’s mechanism to ensure that only memory safe operations can occur during program execution. Different kinds of pointers are discussed in this chapter.</p>
<p><a href="d271499e-5fd5-48a4-8395-e5efedc8a482.xhtml">Chapter 8</a>, <em>Organizing Code and Macros</em>, discusses the bigger code-organizing structures in Rust, such as modules and crates. It also touches upon how to build macros in order to generate code, thus saving time and effort.</p>
<p><a href="60543aaa-c7d6-43ec-9237-9fe71a0cad4d.xhtml">Chapter 9</a>, <em>Concurrency – Coding for Multicore Execution</em>, delves into Rust’s concurrency model based on threads and channels. We also discuss a safe strategy for working with shared mutable data. </p>
<p><a href="4b959ff8-fbf2-44e8-bb32-6055ef9fe740.xhtml">Chapter 10</a>, <em>Programming at the Boundaries</em>, looks at how Rust behaves in situations where we have to leave the safety boundaries, such as when interfacing with C or using raw pointers, and how Rust minimizes potential dangers when doing so.</p>
<p><a href="575d229f-420f-45c3-acaf-779ef9494480.xhtml">Chapter 11</a>, <em>Exploring the Standard Library</em>, gives us an overview of what is contained in Rust’s Standard Library with an emphasis on collections and the built-in macros. We also discuss how to let Rust work without standard library, for example, in very resource-constrained environments.</p>
<p><a href="dbbf7355-69c2-4829-a1ca-4abd4eba1809.xhtml">Chapter 12</a>, <em>The Ecosystem of Crates</em>, covers how<span> to work with crates built by other developers. We look at crates to work with files and databases, do web development, and develop graphics applications and games.</span></p>


            </article>

            
        </section>
    </div></body>
</html>