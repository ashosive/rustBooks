<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Building crates</h1>
                </header>
            
            <article>
                
<p>At the highest level, there is the crate. The Rust distribution contains a number of crates, such as the <kbd>std</kbd> crate of the standard library, which we have already used often. Other built-in crates include the <kbd>collections</kbd> crate, with functionality to work with strings, vectors, linked lists, and key-value maps, and the <kbd>test</kbd> or <kbd>rustc-test</kbd> crates, with unit-testing and micro-benchmarking functionality.</p>
<p>A crate is the equivalent of a package or library in other languages. It is also the unit of compilation: <kbd>rustc</kbd> only compiles one crate at a time. What does this mean? When our project has a code file containing a <kbd>main()</kbd> function, then it is clear that our project is an executable program (also called a binary), starting execution in <kbd>main()</kbd>. For example, if we compile <kbd>structs.rs</kbd> as follows:</p>
<pre><strong>rustc structs.rs</strong>  </pre>
<p>A <kbd>.exe</kbd> file, <kbd>structs.exe</kbd>, is produced in Windows, which can be executed on its own (and equivalent <kbd>structs</kbd> executables on other operating systems). This is the standard behavior when invoking rustc. When working with Cargo (see <a href="b77a4ac4-6a4c-42a6-aecf-63fd957f3d8a.xhtml"><span class="ChapterrefPACKT">Chapter 1</span></a>, <em>Starting with Rust</em>) we have to indicate that we want a binary project at its creation with the <kbd>--bin</kbd> flag:</p>
<pre><strong>cargo new projname --bin</strong></pre>
<p>However, often you want to write a project whose code will be called from other projects, a so-called <strong>shared library</strong> (in Windows this is a <kbd>.dll</kbd> file, in Linux an <kbd>.so</kbd> file, and on OSX a <kbd>.dylib</kbd> file). In that case, your code will only contain data structures and functions to work on them, so you must explicitly indicate this to the compiler using the <kbd>--crate-type</kbd> flag with the <kbd>lib</kbd> option:</p>
<pre><strong>rustc --crate-type=lib  structs.rs</strong>  </pre>
<p>The resulting file is far smaller in size and is called <kbd>libstructs.rlib</kbd>; the suffix is now <kbd>.rlib</kbd> (for Rust library) and <kbd>lib</kbd> is prepended before the filename. If you want the crate to have another name, like <kbd>mycrate</kbd>, then use the <kbd>--crate-name</kbd> flag as follows:</p>
<pre><strong>rustc --crate-type=lib  --crate-name=mycrate  structs.rs</strong>  </pre>
<p>This creates a <kbd>libmycrate.rlib</kbd> as the output file.</p>
<p>An alternative to using the <kbd>rustc</kbd> flags is to put this info as the attributes at the top of the code file, like this:</p>
<pre>// from Chapter 8/code/structs.rs 
#![crate_type = "lib"]  
#![crate_name = "mycrate"] </pre>
<p>The <kbd>crate_type</kbd> attribute can take the following values: <kbd>bin</kbd>, <kbd>lib</kbd>, <kbd>rlib</kbd>, <kbd>dylib</kbd>, and <kbd>staticlib</kbd>, according to whether you want a binary executable or a library of a certain type, dynamically or statically linked (in general when an <kbd>attr</kbd> attribute applies to a whole crate, the syntax to use in code is <kbd>#![crate_attr]</kbd>).</p>
<p>Each library used in an application is a separate crate. In any case, you need an executable (binary) crate that uses the library crates.</p>
<p>Rust has a built-in library manager called Cargo (for more info on Cargo, see <a href="b77a4ac4-6a4c-42a6-aecf-63fd957f3d8a.xhtml"><span class="ChapterrefPACKT">Chapter 1</span></a>, <em>Starting with Rust</em>, and the <em>Working with Cargo</em> section); it creates a library project by default. Typically, when starting your own project, you would create it with Cargo, use the code organization techniques you will learn in this chapter, and then make this code into an executable with:</p>
<pre><strong>cargo build</strong>  </pre>
<p>You can install other crates into your project from the crates repository <a href="https://crates.io"><span class="URLPACKT">https://crates.io</span></a>; in the <em>Adding external crates to a project</em> section, we see how this is done.</p>


            </article>

            
        </section>
    </div></body>
</html>